"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
"""
import logging
import asyncio
import httpx
from typing import List, Dict, Any
from database import (
    get_users_for_quick_message, 
    get_users_for_auto_message,
    update_last_quick_message,
    update_last_auto_message
)
from llm_utils import generate_quick_message_llm, generate_auto_message_llm
from config import RENDER_EXTERNAL_URL

logger = logging.getLogger(__name__)

async def send_quick_messages(bot):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("üîç DEBUG: send_quick_messages() –≤—ã–∑–≤–∞–Ω–∞!")
    try:
        users = get_users_for_quick_message()
        logger.info(f"Found {len(users)} users for quick messages")
        
        for user in users:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                update_last_quick_message(user["user_tg_id"])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LLM
                message = generate_quick_message_llm(
                    user["first_name"], 
                    user["preferences"], 
                    user["user_tg_id"]
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(chat_id=user["chat_id"], text=message)
                
                logger.info(f"Quick message sent to user {user['user_tg_id']}: {message[:50]}...")
                
            except Exception as e:
                logger.error(f"Error sending quick message to user {user['user_tg_id']}: {e}")
                
    except Exception as e:
        logger.error(f"Error in send_quick_messages: {e}")

async def send_auto_messages(bot):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info(" DEBUG: send_auto_messages() –≤—ã–∑–≤–∞–Ω–∞!")
    try:
        users = get_users_for_auto_message()
        logger.info(f"Found {len(users)} users for auto messages")
        
        for user in users:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                update_last_auto_message(user["user_tg_id"])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LLM
                message = generate_auto_message_llm(
                    user["first_name"], 
                    user["preferences"], 
                    user["user_tg_id"]
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(chat_id=user["chat_id"], text=message)
                
                logger.info(f"Auto message sent to user {user['user_tg_id']}: {message[:50]}...")
                
            except Exception as e:
                logger.error(f"Error sending auto message to user {user['user_tg_id']}: {e}")
                
    except Exception as e:
        logger.error(f"Error in send_auto_messages: {e}")

async def quick_message_scheduler(bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)"""
    logger.info("üöÄ DEBUG: quick_message_scheduler() –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            await send_quick_messages(bot)
        except Exception as e:
            logger.error(f"Error in quick_message_scheduler: {e}")
        
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

async def auto_message_scheduler(bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)"""
    logger.info("üöÄ DEBUG: auto_message_scheduler() –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            await send_auto_messages(bot)
        except Exception as e:
            logger.error(f"Error in auto_message_scheduler: {e}")
        
        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞

async def ping_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∏–Ω–≥–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Render"""
    logger.info("üöÄ DEBUG: ping_scheduler() –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            # –î–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{RENDER_EXTERNAL_URL}/ping", timeout=10.0)
                if response.status_code == 200:
                    logger.info("üèì Ping successful - Render kept alive!")
                else:
                    logger.warning(f"üèì Ping failed with status {response.status_code}, response: {response.text[:100]}")
        except Exception as e:
            logger.error(f"Error in ping_scheduler: {e}")
        
        await asyncio.sleep(3600)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç (3600 —Å–µ–∫—É–Ω–¥) 