"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ö–∞—Ç–µ–π (–Ω–∞–ø–∏—Ç–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, –ø–æ–¥–∞—Ä–∫–∏)
"""
import logging
import random
import json
from sqlalchemy import create_engine, text
from config import DATABASE_URL
from constants import STICKERS

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)

def can_katya_drink_free(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"""
    try:
        with engine.begin() as conn:
            result = conn.execute(
                text("SELECT drinks_count FROM katya_free_drinks WHERE chat_id = :chat_id"),
                {"chat_id": chat_id}
            ).fetchone()
            
            if result:
                return result[0] < 5  # –ú–∞–∫—Å–∏–º—É–º 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                conn.execute(
                    text("INSERT INTO katya_free_drinks (chat_id, drinks_count) VALUES (:chat_id, 0)"),
                    {"chat_id": chat_id}
                )
                return True
    except Exception as e:
        logger.error(f"Error checking free drinks: {e}")
        return False

def increment_katya_drinks(chat_id: int) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("UPDATE katya_free_drinks SET drinks_count = drinks_count + 1 WHERE chat_id = :chat_id"),
                {"chat_id": chat_id}
            )
    except Exception as e:
        logger.error(f"Error incrementing drinks: {e}")

async def update_katya_free_drinks(chat_id: int, increment: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("UPDATE katya_free_drinks SET drinks_count = drinks_count + :increment WHERE chat_id = :chat_id"),
                {"increment": increment, "chat_id": chat_id}
            )
    except Exception as e:
        logger.error(f"Error updating free drinks: {e}")

async def send_sticker_by_command(bot, chat_id: int, command: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    try:
        if command in STICKERS:
            sticker_id = STICKERS[command]
            await bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
            logger.info(f"Sent sticker {command} to chat {chat_id}")
        else:
            logger.warning(f"Unknown sticker command: {command}")
    except Exception as e:
        logger.error(f"Error sending sticker {command}: {e}")

async def send_gift_request(bot, chat_id: int, user_tg_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫"""
    try:
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ –ø–æ 1 –∑–≤–µ–∑–¥–µ)
        drinks = [
            {"name": "–ü–∏–≤–æ", "emoji": "üç∫", "price": 1},
            {"name": "–í–æ–¥–∫–∞", "emoji": "üç∏", "price": 1},
            {"name": "–í–∏–Ω–æ", "emoji": "üç∑", "price": 1},
            {"name": "–í–∏—Å–∫–∏", "emoji": "ü•É", "price": 1},
            {"name": "–®–∞–º–ø–∞–Ω—Å–∫–æ–µ", "emoji": "üçæ", "price": 1},
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫
        drink = random.choice(drinks)
        
        # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payload = json.dumps({
            "drink_name": drink["name"],
            "drink_emoji": drink["emoji"]
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice
        await bot.send_invoice(
            chat_id=chat_id,
            title=f"–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ö–∞—Ç–∏: {drink['name']} {drink['emoji']}",
            description=f"–ü–æ–¥–∞—Ä–∏ –ö–∞—Ç–µ {drink['name'].lower()}! –û–Ω–∞ –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ä–∞–¥–∞! üíï",
            payload=payload,
            provider_token="",  # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            currency="XTR",  # Telegram Stars
            prices=[{"label": f"{drink['name']} {drink['emoji']}", "amount": drink["price"]}]
        )
        
    except Exception as e:
        logger.error(f"Error sending gift request: {e}") 