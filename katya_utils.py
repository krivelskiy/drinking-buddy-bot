–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ö–∞—Ç–µ–π (–Ω–∞–ø–∏—Ç–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, –ø–æ–¥–∞—Ä–∫–∏)
"""
import logging
import random
import json
from sqlalchemy import create_engine, text
from config import DATABASE_URL
from constants import STICKERS

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)

def can_katya_drink_free(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"""
    try:
        with engine.begin() as conn:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∏ –ø–æ–ª–µ
            result = conn.execute(
                text("SELECT drinks_count FROM katya_free_drinks WHERE chat_id = :chat_id"),
                {"chat_id": chat_id}
            ).fetchone()
            
            if result:
                return result[0] < 5  # –ú–∞–∫—Å–∏–º—É–º 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                conn.execute(
                    text("INSERT INTO katya_free_drinks (chat_id, drinks_count) VALUES (:chat_id, 0)"),
                    {"chat_id": chat_id}
                )
                return True  # –ü–µ—Ä–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
                
    except Exception as e:
        logger.error(f"Error checking free drinks: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –ø–æ–ª–µ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        try:
            with engine.begin() as conn:
                conn.execute(text("DROP TABLE IF EXISTS katya_free_drinks"))
                conn.execute(text("CREATE TABLE katya_free_drinks (chat_id INTEGER PRIMARY KEY, drinks_count INTEGER)"))
                return True # –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
        except Exception as re_e:
            logger.error(f"Error recreating table: {re_e}")
            return False

def increment_katya_drinks(chat_id: int) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("UPDATE katya_free_drinks SET drinks_count = drinks_count + 1 WHERE chat_id = :chat_id"),
                {"chat_id": chat_id}
            )
    except Exception as e:
        logger.error(f"Error incrementing drinks: {e}")

async def update_katya_free_drinks(chat_id: int, increment: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("UPDATE katya_free_drinks SET drinks_count = drinks_count + :increment WHERE chat_id = :chat_id"),
                {"increment": increment, "chat_id": chat_id}
            )
    except Exception as e:
        logger.error(f"Error updating free drinks: {e}")

async def send_sticker_by_command(bot, chat_id: int, command: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    try:
        if command in STICKERS:
            sticker_id = STICKERS[command]
            await bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
            logger.info(f"Sent sticker {command} to chat {chat_id}")
        else:
            logger.warning(f"Unknown sticker command: {command}")
    except Exception as e:
        logger.error(f"Error sending sticker {command}: {e}")

async def send_gift_request(bot, chat_id: int, user_tg_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        from database import get_user_name
        from db_utils import get_user_gender
        
        user_name = get_user_name(user_tg_id) or "–¥—Ä—É–≥"
        user_gender = get_user_gender(user_tg_id) or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ –ø–æ 1 –∑–≤–µ–∑–¥–µ)
        drinks = [
            {"name": "–í–∏–Ω–æ", "emoji": "üç∑", "price": 1},
            {"name": "–í–æ–¥–∫–∞", "emoji": "üç∏", "price": 1},
            {"name": "–í–∏—Å–∫–∏", "emoji": "ü•É", "price": 1},
            {"name": "–ü–∏–≤–æ", "emoji": "üç∫", "price": 1},
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
        prices = []
        for drink in drinks:
            prices.append({
                "label": f"{drink['name']} {drink['emoji']}",
                "amount": drink["price"]
            })
        
        # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤)
        payload = json.dumps({
            "drink_name": "–Ω–∞–ø–∏—Ç–æ–∫",
            "drink_emoji": "üçπ"
        })
        
        # –ë–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        descriptions = [
            "–ö–∞—Ç—è –º–µ—á—Ç–∞–µ—Ç –æ –≤–∫—É—Å–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ... –ú–æ–∂–µ—Ç, —É–≥–æ—Å—Ç–∏—à—å –µ—ë? üíï",
            "–ö–∞—Ç–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è –≤—ã–ø–∏—Ç—å! –ü–æ–¥–∞—Ä–∏—à—å –µ–π —Ä–∞–¥–æ—Å—Ç—å? üíï",
            "–ö–∞—Ç—è —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –±–∞—Ä —Å –Ω–∞–¥–µ–∂–¥–æ–π... –ü–æ–º–æ–∂–µ—à—å? üíï",
            "–ö–∞—Ç–µ –Ω—É–∂–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üíï",
            "–ö–∞—Ç—è –ø—Ä–æ—Å–∏—Ç —É–≥–æ—Å—Ç–∏—Ç—å... –ë—É–¥–µ—Ç –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞! üòò"
        ]
        
        description = random.choice(descriptions)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice —Å –æ–±—â–∏–º —Å–ø–∏—Å–∫–æ–º –Ω–∞–ø–∏—Ç–∫–æ–≤
        await bot.send_invoice(
            chat_id=chat_id,
            title="–£–≥–æ—Å—Ç–∏ –ö–∞—Ç—é –Ω–∞–ø–∏—Ç–∫–æ–º üçπ",
            description=description,
            payload=payload,
            provider_token="",  # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            currency="XTR",  # Telegram Stars
            prices=prices
        )
        
    except Exception as e:
        logger.error(f"Error sending gift request: {e}") 