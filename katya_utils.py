"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ö–∞—Ç–µ–π (–Ω–∞–ø–∏—Ç–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, –ø–æ–¥–∞—Ä–∫–∏)
"""
import logging
import random
import json
from sqlalchemy import create_engine, text
from config import DATABASE_URL
from constants import STICKERS

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)

def can_katya_drink_free(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"""
    try:
        with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å —Å —É—á–µ—Ç–æ–º –¥–∞—Ç—ã —Å–±—Ä–æ—Å–∞
            result = conn.execute(
                text("""
                    SELECT drinks_count, date_reset 
                    FROM katya_free_drinks 
                    WHERE chat_id = :chat_id
                """),
                {"chat_id": chat_id}
            ).fetchone()
            
            if result:
                drinks_count, date_reset = result
                
                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫)
                from datetime import datetime, timezone
                now = datetime.now(timezone.utc)
                
                if date_reset:
                    # –ü—Ä–∏–≤–æ–¥–∏–º date_reset –∫ timezone-aware –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if hasattr(date_reset, 'tzinfo') and date_reset.tzinfo is None:
                        date_reset = date_reset.replace(tzinfo=timezone.utc)
                    elif not hasattr(date_reset, 'tzinfo'):
                        # –ï—Å–ª–∏ —ç—Ç–æ date, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime
                        from datetime import date
                        if isinstance(date_reset, date):
                            date_reset = datetime.combine(date_reset, datetime.min.time()).replace(tzinfo=timezone.utc)
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    if (now - date_reset).days >= 1:
                        conn.execute(
                            text("""
                                UPDATE katya_free_drinks 
                                SET drinks_count = 0, date_reset = NOW() 
                                WHERE chat_id = :chat_id
                            """),
                            {"chat_id": chat_id}
                        )
                        logger.info(f"Reset drinks count for chat {chat_id} - new day started")
                        return True  # –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –º–æ–∂–Ω–æ –ø–∏—Ç—å
                
                return drinks_count < 5  # –ú–∞–∫—Å–∏–º—É–º 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                conn.execute(
                    text("""
                        INSERT INTO katya_free_drinks (chat_id, drinks_count, date_reset) 
                        VALUES (:chat_id, 0, NOW())
                    """),
                    {"chat_id": chat_id}
                )
                return True  # –ü–µ—Ä–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
                
    except Exception as e:
        logger.error(f"Error checking free drinks: {e}")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∏—Ç—å

def increment_katya_drinks(chat_id: int) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    try:
        with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
            result = conn.execute(
                text("""
                    SELECT drinks_count, date_reset 
                    FROM katya_free_drinks 
                    WHERE chat_id = :chat_id
                """),
                {"chat_id": chat_id}
            ).fetchone()
            
            if result:
                drinks_count, date_reset = result
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫)
                from datetime import datetime, timezone
                now = datetime.now(timezone.utc)
                
                if date_reset:
                    # –ü—Ä–∏–≤–æ–¥–∏–º date_reset –∫ timezone-aware –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if hasattr(date_reset, 'tzinfo') and date_reset.tzinfo is None:
                        date_reset = date_reset.replace(tzinfo=timezone.utc)
                    elif not hasattr(date_reset, 'tzinfo'):
                        # –ï—Å–ª–∏ —ç—Ç–æ date, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime
                        from datetime import date
                        if isinstance(date_reset, date):
                            date_reset = datetime.combine(date_reset, datetime.min.time()).replace(tzinfo=timezone.utc)
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    if (now - date_reset).days >= 1:
                        conn.execute(
                            text("""
                                UPDATE katya_free_drinks 
                                SET drinks_count = 1, date_reset = NOW() 
                                WHERE chat_id = :chat_id
                            """),
                            {"chat_id": chat_id}
                        )
                        logger.info(f"Reset and incremented drinks count for chat {chat_id} - new day started")
                        return
                
                # –û–±—ã—á–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
                conn.execute(
                    text("UPDATE katya_free_drinks SET drinks_count = drinks_count + 1 WHERE chat_id = :chat_id"),
                    {"chat_id": chat_id}
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                conn.execute(
                    text("""
                        INSERT INTO katya_free_drinks (chat_id, drinks_count, date_reset) 
                        VALUES (:chat_id, 1, NOW())
                    """),
                    {"chat_id": chat_id}
                )
    except Exception as e:
        logger.error(f"Error incrementing drinks: {e}")

async def update_katya_free_drinks(chat_id: int, increment: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("UPDATE katya_free_drinks SET drinks_count = drinks_count + :increment WHERE chat_id = :chat_id"),
                {"increment": increment, "chat_id": chat_id}
            )
    except Exception as e:
        logger.error(f"Error updating free drinks: {e}")

async def send_sticker_by_command(bot, chat_id: int, command: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    try:
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
        command_mapping = {
            "[SEND_DRINK_VODKA]": STICKERS["DRINK_VODKA"],
            "[SEND_DRINK_WHISKY]": STICKERS["DRINK_WHISKY"],
            "[SEND_DRINK_WINE]": STICKERS["DRINK_WINE"],
            "[SEND_DRINK_BEER]": STICKERS["DRINK_BEER"],
            "[SEND_KATYA_HAPPY]": STICKERS["KATYA_HAPPY"],
            "[SEND_KATYA_SAD]": STICKERS["KATYA_SAD"],
            "[SEND_SAD_STICKER]": STICKERS["KATYA_SAD"],  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≥—Ä—É—Å—Ç–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
            "[SEND_HAPPY_STICKER]": STICKERS["KATYA_HAPPY"],  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≤–µ—Å–µ–ª–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
        }
        
        if command in command_mapping:
            sticker_id = command_mapping[command]
            await bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
            logger.info(f"Sent sticker {command} to chat {chat_id}")
        elif command in STICKERS:
            sticker_id = STICKERS[command]
            await bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
            logger.info(f"Sent sticker {command} to chat {chat_id}")
        else:
            logger.warning(f"Unknown sticker command: {command}")
    except Exception as e:
        logger.error(f"Error sending sticker {command}: {e}")

async def send_gift_request(bot, chat_id: int, user_tg_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞"""
    try:
        from database import get_user_name
        from db_utils import get_user_gender
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        user_name = get_user_name(user_tg_id) or "–¥—Ä—É–≥"
        user_gender = get_user_gender(user_tg_id) or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
        drinks = [
            {"name": "–í–∏–Ω–æ", "emoji": "üç∑", "price": 250},
            {"name": "–í–æ–¥–∫–∞", "emoji": "üç∏", "price": 100},
            {"name": "–í–∏—Å–∫–∏", "emoji": "ü•É", "price": 500},
            {"name": "–ü–∏–≤–æ", "emoji": "üç∫", "price": 50},
        ]
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
        keyboard = []
        for drink in drinks:
            button = InlineKeyboardButton(
                f"{drink['name']} {drink['emoji']} - {drink['price']} ‚≠ê",
                callback_data=f"gift_{drink['name'].lower()}"
            )
            keyboard.append([button])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ë–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        descriptions = [
            "–ö–∞—Ç—è –º–µ—á—Ç–∞–µ—Ç –æ –≤–∫—É—Å–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ... –ú–æ–∂–µ—Ç, —É–≥–æ—Å—Ç–∏—à—å –µ—ë? üíï",
            "–ö–∞—Ç–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è –≤—ã–ø–∏—Ç—å! –ü–æ–¥–∞—Ä–∏—à—å –µ–π —Ä–∞–¥–æ—Å—Ç—å? üíï",
            "–ö–∞—Ç—è —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –±–∞—Ä —Å –Ω–∞–¥–µ–∂–¥–æ–π... –ü–æ–º–æ–∂–µ—à—å? üíï",
            "–ö–∞—Ç–µ –Ω—É–∂–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üíï",
            "–ö–∞—Ç—è –ø—Ä–æ—Å–∏—Ç —É–≥–æ—Å—Ç–∏—Ç—å... –ë—É–¥–µ—Ç –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞! üòò"
        ]
        
        description = random.choice(descriptions)
        
        logger.info(f"Sending gift request with inline buttons for {len(drinks)} drinks")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_message(
            chat_id=chat_id,
            text=f"{description}\n\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ö–∞—Ç–∏:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error sending gift request: {e}") 