import os
import logging
import asyncio
from typing import Optional

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, PlainTextResponse

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --------- –õ–û–ì–ò ---------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(name)s:%(message)s"
)
log = logging.getLogger("app")

# --------- ENV ---------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
APP_BASE_URL = os.getenv("APP_BASE_URL", "").strip().rstrip("/")

if not BOT_TOKEN:
    log.warning("ENV BOT_TOKEN is empty!")
if not OPENAI_API_KEY:
    log.warning("ENV OPENAI_API_KEY is empty! Bot will use fallback replies.")
if not APP_BASE_URL:
    log.warning("APP_BASE_URL is empty! Webhook auto-set will be skipped.")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{APP_BASE_URL}{WEBHOOK_PATH}" if APP_BASE_URL else None

# --------- OpenAI client ---------
reply_fallback = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

client = None
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        log.info("OpenAI client is initialized.")
    except Exception as e:
        log.error(f"OpenAI init failed: {e}")
        client = None


async def generate_reply(prompt: str) -> str:
    if not client:
        return reply_fallback

    system_prompt = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ-—Ä—É—Å—Å–∫–∏, —Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –±–∞—Ä–∞: "
        "—á—É—Ç—å —à—É—Ç–æ–∫, —Ç–µ–ø–ª–æ—Ç—ã, —ç–º–æ–¥–∑–∏ –ø–æ –≤–∫—É—Å—É. –ò–∑–±–µ–≥–∞–π —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –∏ –≥—Ä—É–±–æ—Å—Ç–µ–π."
    )

    def _call():
        return client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt},
            ],
            max_tokens=180,
            temperature=0.7,
        )

    try:
        resp = await asyncio.to_thread(_call)
        return resp.choices[0].message.content.strip() or reply_fallback
    except Exception as e:
        log.error(f"OpenAI error: {e}")
        return reply_fallback


# --------- Telegram handlers ---------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫ üçª –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî –ø–æ–¥–¥–µ—Ä–∂—É —Ä–∞–∑–≥–æ–≤–æ—Ä. "
        "–ö–æ–º–∞–Ω–¥–∞ /toast ‚Äî –ø–æ–¥–Ω–∏–º–µ–º –±–æ–∫–∞–ª—ã!"
    )


async def cmd_toast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    toasts = [
        "–ó–∞ –∑–¥–æ—Ä–æ–≤—å–µ! ü•Ç",
        "–ó–∞ –¥—Ä—É–∂–±—É –∏ —É–¥–∞—á—É! üçª",
        "–ß—Ç–æ–±—ã —É—Ç—Ä–æ –±—ã–ª–æ –¥–æ–±—Ä—ã–º! üç∫",
        "–ó–∞ —Ç–µ—Ö, –∫—Ç–æ —Å –Ω–∞–º–∏! ü•É",
        "–ó–∞ –º–µ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–±—É–¥—É—Ç—Å—è! üç∑",
    ]
    await update.message.reply_text(random.choice(toasts))


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text or ""
    reply = await generate_reply(user_text)
    await update.message.reply_text(reply)


# --------- FastAPI + PTB lifecycle ---------
app = FastAPI()

application: Optional[Application] = None
if BOT_TOKEN:
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("toast", cmd_toast))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
else:
    log.error("BOT_TOKEN is missing ‚Äî Telegram part will not start.")


@app.get("/")
def root():
    return {"status": "ok"}


@app.on_event("startup")
async def _startup():
    if not application:
        return
    log.info("Starting Telegram application...")
    await application.initialize()
    await application.start()
    if WEBHOOK_URL:
        try:
            await application.bot.set_webhook(WEBHOOK_URL, allowed_updates=["message"])
            log.info(f"Webhook set to: {WEBHOOK_URL}")
        except Exception as e:
            log.error(f"Failed to set webhook: {e}")


@app.on_event("shutdown")
async def _shutdown():
    if not application:
        return
    await application.stop()
    await application.shutdown()


@app.post(WEBHOOK_PATH if BOT_TOKEN else "/webhook-not-configured")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        log.info(f"Incoming update: {data}")
        if not application:
            return JSONResponse({"ok": True})

        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return JSONResponse({"ok": True})
    except Exception as e:
        log.error(f"webhook error: {e}")
        return PlainTextResponse("ok")
