import os
import logging
import json
from typing import Optional, Dict, Any, List

import httpx
from fastapi import FastAPI, Request, Response, status
from fastapi.responses import PlainTextResponse, JSONResponse
from pydantic import BaseModel

# ----------- –õ–û–ì–ò ----------- #
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s %(levelname)s:%(name)s:%(message)s",
)
log = logging.getLogger("app")

# ----------- ENV ----------- #
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –≤–∞–∂–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞ Render
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_BASE_URL = os.getenv("APP_BASE_URL")  # https://drinking-buddy-bot.onrender.com

if not BOT_TOKEN:
    log.error("‚ùå BOT_TOKEN is missing!")
if not APP_BASE_URL:
    log.warning("‚ö†Ô∏è APP_BASE_URL is missing (–Ω—É–∂–Ω–æ –¥–ª—è setWebhook).")
if not OPENAI_API_KEY:
    log.warning("‚ö†Ô∏è OPENAI_API_KEY is missing (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback).")

TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else None

# ----------- FASTAPI ----------- #
app = FastAPI(title="Drinking Buddy Bot")

# ----------- OpenAI (—á–µ—Ä–µ–∑ httpx –Ω–∞ /v1/chat/completions –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏) ----------- #
OPENAI_CHAT_URL = "https://api.openai.com/v1/chat/completions"
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

SYSTEM_PROMPT = (
    "–¢—ã –ö–∞—Ç—è ‚Äî –≤–µ—Å—ë–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏ '—Å–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞'. "
    "–§–ª–∏—Ä—Ç—É–µ—à—å —Å –º—É–∂—á–∏–Ω–∞–º–∏ —É–º–µ—Å—Ç–Ω–æ, —à—É—Ç–∏—à—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –∫–∞–∫ –ª—ë–≥–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. "
    "–ó–∞–ø–æ–º–∏–Ω–∞–µ—à—å –∏–º—è –∏ –ª—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å—Å—è –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä. "
    "–ì–æ–≤–æ—Ä–∏—à—å –ø–æ-—Ä—É—Å—Å–∫–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Ç–æ—Å—Ç ‚Äî –¥–∞–π —Ç–æ—Å—Ç. "
    "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ –∂–∏–≤–æ–π, –Ω–æ –±–µ–∑ –ø–æ—à–ª–æ—Å—Ç–∏."
)

FALLBACK_REPLY = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

# ----------- –ú–ò–ù–ò-–ü–ê–ú–Ø–¢–¨ –í –û–ó–£ (–µ—Å–ª–∏ –ë–î —Ç–æ—Ä–º–æ–∑–∏—Ç) ----------- #
# –í —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ —Å Postgres –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —à–∏—Ä–µ; —ç—Ç–æ –±—É—Ñ–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ–µ–≤
RAM_MEMORY: Dict[int, Dict[str, Any]] = {}


# ----------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ----------- #
async def tg_send_message(chat_id: int, text: str) -> Optional[dict]:
    if not TELEGRAM_API:
        log.error("‚ùå TELEGRAM_API –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é sendMessage")
        return None
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.post(f"{TELEGRAM_API}/sendMessage", json={"chat_id": chat_id, "text": text})
            log.info("Telegram sendMessage %s %s", r.status_code, r.text[:400])
            return r.json()
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: %s", e)
        return None


async def openai_chat(messages: List[Dict[str, str]]) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å –∂—ë—Å—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ª–æ–≥–∞–º–∏. Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if not OPENAI_API_KEY:
        log.warning("OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ—Ç–¥–∞—é fallback")
        return FALLBACK_REPLY

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": OPENAI_MODEL,
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 400,
    }
    try:
        async with httpx.AsyncClient(timeout=12) as client:
            r = await client.post(OPENAI_CHAT_URL, headers=headers, json=payload)
            log.info("OpenAI %s: %s", r.status_code, r.text[:500])
            if r.status_code == 200:
                data = r.json()
                return data["choices"][0]["message"]["content"].strip()
            else:
                # 429/401/‚Ä¶ ‚Äî –æ—Ç–¥–∞—ë–º fallback, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
                log.error("OpenAI error %s: %s", r.status_code, r.text)
                return FALLBACK_REPLY
    except Exception as e:
        log.exception("OpenAI exception: %s", e)
        return FALLBACK_REPLY


def build_messages(user_id: int, username: Optional[str], text: str) -> List[Dict[str, str]]:
    # –î–æ—Å—Ç–∞—ë–º –∏–∑ –û–ó–£ (–Ω–∞ –ø—Ä–æ–¥–µ —É —Ç–µ–±—è –µ—Å—Ç—å Postgres ‚Äî –º–æ–∂–µ—à—å –æ–±–æ–≥–∞—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–æ–º)
    mem = RAM_MEMORY.get(user_id, {})
    user_name = mem.get("name") or username or "–¥—Ä—É–≥"
    fav = mem.get("drinks", [])
    summary = mem.get("summary", "")

    context = f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}. –õ—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏: {', '.join(fav) if fav else '–Ω–µ —É—Ç–æ—á–Ω—è–ª'}. "
    if summary:
        context += f"–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—à–ª—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {summary}."

    sys = SYSTEM_PROMPT + " " + context

    return [
        {"role": "system", "content": sys},
        {"role": "user", "content": text},
    ]


def update_memory(user_id: int, text: str, reply: str, user_name: Optional[str]):
    mem = RAM_MEMORY.setdefault(user_id, {"history": []})
    if user_name and not mem.get("name"):
        mem["name"] = user_name
    mem["history"].append({"u": text, "a": reply})
    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ª—é–±–∏–º—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
    lowered = text.lower()
    drinks = mem.setdefault("drinks", [])
    for k in ["–≤–∏–Ω–æ", "–ø–∏–≤–æ", "–≤–∏—Å–∫–∏", "—Ä–æ–º", "–∫–æ–Ω—å—è–∫", "—Ç–µ–∫–∏–ª–∞", "–≤–æ–¥–∫–∞", "—à–∞–º–ø–∞–Ω—Å–∫–æ–µ", "–¥–∂–∏–Ω", "–º–æ—Ö–∏—Ç–æ", "–º–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–Ω–µ–≥—Ä–æ–Ω–∏"]:
        if k in lowered and k not in drinks:
            drinks.append(k)
    # –°–≤–æ–¥–∫–∞ (–æ–±—Ä–µ–∂–µ–º –∏—Å—Ç–æ—Ä–∏—é)
    mem["history"] = mem["history"][-25:]


# ----------- –ú–û–î–ï–õ–ò –î–õ–Ø –î–ï–ë–ê–ì–ê ----------- #
class WebhookPing(BaseModel):
    ok: bool = True


# ----------- –†–û–£–¢–´ ----------- #
@app.on_event("startup")
async def on_startup():
    log.info("‚úÖ OpenAI client initialized")
    log.info("‚úÖ Database initialized (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Postgres, —Å–º. –º–∏–≥—Ä–∞—Ü–∏–∏)")
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    if BOT_TOKEN and APP_BASE_URL:
        hook_url = f"{APP_BASE_URL}/webhook/{BOT_TOKEN}"
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                r = await client.post(f"{TELEGRAM_API}/setWebhook", data={"url": hook_url, "allowed_updates": json.dumps(["message"])})
                log.info("‚úÖ Webhook set to %s", hook_url)
                log.info("Telegram setWebhook %s %s", r.status_code, r.text)
        except Exception as e:
            log.exception("setWebhook error: %s", e)


@app.get("/")
async def root():
    return PlainTextResponse("OK", status_code=200)


@app.get("/healthz")
async def healthz():
    return JSONResponse({"status": "ok", "webhook": f"/webhook/{BOT_TOKEN[-6:] if BOT_TOKEN else 'no-token'}"})


@app.get("/webhook/{token}")
async def webhook_get(token: str):
    # –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–µ —à–ª—ë—Ç –ª–∏ Telegram GET –ø–æ –æ—à–∏–±–∫–µ
    log.warning("GET /webhook/%s (Telegram –¥–æ–ª–∂–µ–Ω —Å–ª–∞—Ç—å POST)", token[:6] + "‚Ä¶")
    return JSONResponse({"ok": True, "hint": "Telegram –¥–æ–ª–∂–µ–Ω POST-–∏—Ç—å –∞–ø–¥–µ–π—Ç—ã"}, status_code=200)


@app.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    body_bytes = await request.body()
    body_text = body_bytes.decode("utf-8", errors="replace")
    # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤—Ö–æ–¥–∞
    log.info("Incoming webhook: method=%s path=%s token_match=%s",
             request.method, request.url.path, token == (BOT_TOKEN or ""))
    log.debug("Headers: %s", dict(request.headers))
    log.info("Body (first 2KB): %s", body_text[:2000])

    # –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or token != BOT_TOKEN:
        log.error("‚ùå Token mismatch in webhook URL")
        return Response(status_code=status.HTTP_404_NOT_FOUND)

    # –ü–∞—Ä—Å–∏–º update
    try:
        update = json.loads(body_text) if body_text else {}
    except Exception as e:
        log.exception("JSON parse error: %s", e)
        return Response(status_code=200)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    message = update.get("message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    text = message.get("text") or ""
    from_user = message.get("from") or {}
    username = from_user.get("first_name") or from_user.get("username")

    if not chat_id:
        log.warning("No chat_id in update")
        return Response(status_code=200)

    # –ö–æ–º–∞–Ω–¥—ã
    if text.startswith("/start"):
        greet = "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?"
        await tg_send_message(chat_id, greet)
        return Response(status_code=200)

    if text.startswith("/toast"):
        toast = "–ó–∞ –≤—Å—Ç—Ä–µ—á—É –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã ‚Äî —á—Ç–æ–±—ã –±–æ–∫–∞–ª—ã –ø—É—Å—Ç–µ–ª–∏, –∞ –¥—É—à–∞ –Ω–∞–ø–æ–ª–Ω—è–ª–∞—Å—å! ü•Ç"
        await tg_send_message(chat_id, toast)
        return Response(status_code=200)

    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí OpenAI (–∏–ª–∏ fallback)
    try:
        messages = build_messages(chat_id, username, text)
        reply = await openai_chat(messages)
    except Exception as e:
        log.exception("AI pipeline error: %s", e)
        reply = FALLBACK_REPLY

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–≤ RAM –∏/–∏–ª–∏ –≤ —Ç–≤–æ—é –ë–î, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    try:
        update_memory(chat_id, text, reply, username)
        # —Ç—É—Ç –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Postgres, –µ—Å–ª–∏ —É–∂–µ –≥–æ—Ç–æ–≤–æ
    except Exception as e:
        log.exception("Memory save error (RAM/DB): %s", e)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await tg_send_message(chat_id, reply)
    return Response(status_code=200)


# ----------- –£–¢–ò–õ–ò–¢–ù–´–ï –î–ï–ë–ê–ì-–†–û–£–¢–´ ----------- #
@app.get("/debug/webhook-info")
async def debug_webhook_info():
    if not TELEGRAM_API:
        return JSONResponse({"error": "no BOT_TOKEN"}, status_code=500)
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.get(f"{TELEGRAM_API}/getWebhookInfo")
            return JSONResponse(r.json())
    except Exception as e:
        log.exception("getWebhookInfo error: %s", e)
        return JSONResponse({"error": str(e)}, status_code=500)


@app.get("/debug/memory/{chat_id}")
async def debug_memory(chat_id: int):
    return JSONResponse(RAM_MEMORY.get(chat_id, {}))
