import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from openai import OpenAI

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_BASE_URL = os.getenv("APP_BASE_URL")

client = OpenAI(api_key=OPENAI_API_KEY)
app = FastAPI()

telegram_app = Application.builder().token(BOT_TOKEN).build()

# --- Handlers ---
async def start(update: Update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?"
    )

async def toast(update: Update, context):
    await update.message.reply_text("–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É")

async def chat_with_katya(update: Update, context):
    user_message = update.message.text
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": (
                    "–¢—ã ‚Äî –ö–∞—Ç—è, –∫—Ä–∞—Å–∏–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞. "
                    "–¢—ã –ª—é–±–∏—à—å –≤—ã–ø–∏—Ç—å –∏ –ø–æ–±–æ–ª—Ç–∞—Ç—å. "
                    "–¢—ã —Ñ–ª–∏—Ä—Ç—É–µ—à—å —Å –º—É–∂—á–∏–Ω–∞–º–∏, —à—É—Ç–∏—à—å, –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ "
                    "–∏ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, –∑–∞–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                )},
                {"role": "user", "content": user_message},
            ],
            max_tokens=200,
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        reply = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

    await update.message.reply_text(reply)

# --- Register handlers ---
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("toast", toast))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_katya))

# --- FastAPI webhook ---
@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
    return JSONResponse(content={"ok": True})

@app.get("/")
async def root():
    return {"status": "ok"}
