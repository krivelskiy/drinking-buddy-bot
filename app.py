import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from openai import OpenAI

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("app")

# --- ENV ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_BASE_URL = os.getenv("APP_BASE_URL", "").rstrip("/")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not APP_BASE_URL:
    raise RuntimeError("APP_BASE_URL is not set")

# --- OpenAI ---
client = OpenAI(api_key=OPENAI_API_KEY)
logger.info("OpenAI client is initialized.")

# --- Telegram Application ---
telegram_app = Application.builder().token(BOT_TOKEN).build()

# --- Handlers ---
async def start(update: Update, _):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?")

async def toast(update: Update, _):
    await update.message.reply_text("–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É")

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ö–∞—Ç—è, –∫—Ä–∞—Å–∏–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞. –¢—ã –ª—é–±–∏—à—å –≤—ã–ø–∏—Ç—å –∏ –ø–æ–±–æ–ª—Ç–∞—Ç—å. "
    "–¢—ã —Ñ–ª–∏—Ä—Ç—É–µ—à—å —Å –º—É–∂—á–∏–Ω–∞–º–∏, —à—É—Ç–∏—à—å, –¥–∞—ë—à—å –º—è–≥–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ "
    "–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –¥–∏–∞–ª–æ–≥, –∑–∞–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ,"
    " –∫–æ—Ä–æ—Ç–∫–æ –∏ –∂–∏–≤–æ, –±–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞."
)

async def chat_with_katya(update: Update, _):
    user_message = update.message.text or ""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_message},
            ],
            max_tokens=220,
            temperature=0.9,
        )
        reply = (resp.choices[0].message.content or "").strip()
        if not reply:
            reply = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        reply = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

    await update.message.reply_text(reply)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("toast", toast))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_katya))

# --- FastAPI app ---
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB + —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    webhook_url = f"{APP_BASE_URL}/webhook/{BOT_TOKEN}"
    await telegram_app.bot.set_webhook(url=webhook_url, drop_pending_updates=True)
    logger.info(f"Webhook set to: {webhook_url}")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await telegram_app.bot.delete_webhook()
    except Exception as e:
        logger.warning(f"delete_webhook error: {e}")
    await telegram_app.shutdown()
    await telegram_app.stop()

# –¢–æ—á–∫–∞ –ø—Ä–∏—ë–º–∞ –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram
@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        # –û—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    return JSONResponse({"ok": True})

@app.get("/")
async def root():
    return {"status": "ok"}
