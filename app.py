import httpx
import re
import logging
import traceback
import random
from functools import wraps
import time
from collections import defaultdict
from datetime import datetime
from typing import Optional
import asyncio
from datetime import datetime, timedelta
import json

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse
from pydantic import BaseModel

from sqlalchemy import create_engine, text, DDL
from sqlalchemy.engine import Engine

from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters, CommandHandler, CallbackQueryHandler, PreCheckoutQueryHandler

from openai import OpenAI

from config import DATABASE_URL, OPENAI_API_KEY, BOT_TOKEN, RENDER_EXTERNAL_URL
from constants import (
    STICKERS, DRINK_KEYWORDS, DB_FIELDS, FALLBACK_OPENAI_UNAVAILABLE,
    USERS_TABLE, MESSAGES_TABLE, BEER_STICKERS, STICKER_TRIGGERS
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from database import (
    save_user, save_message, get_recent_messages, get_user_name, get_user_age,
    update_user_age, update_user_preferences, reset_quick_message_flag,
    update_last_quick_message, get_users_for_quick_message, get_users_for_auto_message,
    update_last_auto_message
)
from llm_utils import llm_reply, generate_quick_message_llm, generate_auto_message_llm
from schedulers import quick_message_scheduler, auto_message_scheduler, ping_scheduler
from message_handlers import handle_user_message, handle_successful_payment
from gender_llm import generate_gender_appropriate_gratitude
from db_utils import get_user_gender, update_user_gender, update_user_name_and_gender
from migrations import run_migrations
from katya_utils import send_gift_request
from katya_utils import send_gift_request

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
try:
    from .game_functions import detect_game_context, get_game_context_prompt
except ImportError:
    def detect_game_context(recent_messages: list) -> Optional[str]:
        return None
    def get_game_context_prompt(game_name: str) -> str:
        return ""

try:
    from .preference_functions import should_ask_preferences
except ImportError:
    def should_ask_preferences(user_tg_id: int) -> bool:
        return True

# -----------------------------
# –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# -----------------------------

# –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
error_counts = defaultdict(int)
last_error_time = defaultdict(float)

def safe_execute(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except NameError as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            logger.error(f"Undefined function in {func.__name__}: {e}")
            return get_fallback_response(func.__name__)
        except Exception as e:
            error_counts[func.__name__] += 1
            last_error_time[func.__name__] = time.time()
            logger.exception(f"Critical error in {func.__name__}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            await notify_critical_error(func.__name__, str(e))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
            return get_fallback_response(func.__name__)
    return wrapper

def safe_execute_sync(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            error_counts[func.__name__] += 1
            last_error_time[func.__name__] = time.time()
            logger.exception(f"Critical error in {func.__name__}: {e}")
            return get_fallback_response(func.__name__)
    return wrapper

def get_fallback_response(function_name: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å fallback –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    fallbacks = {
        "msg_handler": "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! ÔøΩÔøΩ",
        "start": "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è, –Ω–æ —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ",
        "help": "–ò–∑–≤–∏–Ω–∏, —Å–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! ÔøΩÔøΩ",
        "stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ",
        "gift": "–ü–æ–¥–∞—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! ÔøΩÔøΩ",
    }
    return fallbacks.get(function_name, "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ")

async def notify_critical_error(function_name: str, error: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.critical(f"CRITICAL ERROR in {function_name}: {error}")
    except Exception:
        pass

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# -----------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(title="Drinking Buddy Bot", version="1.0.0")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
telegram_app = Application.builder().token(BOT_TOKEN).build()
bot = telegram_app.bot

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü
U = DB_FIELDS['users']
M = DB_FIELDS['messages']

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# -----------------------------

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.begin() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conn.execute(DDL(f"""
                CREATE TABLE IF NOT EXISTS {USERS_TABLE} (
                    {U['user_tg_id']} BIGINT PRIMARY KEY,
                    {U['chat_id']} BIGINT NOT NULL,
                    {U['username']} VARCHAR(255),
                    {U['first_name']} VARCHAR(255),
                    {U['last_name']} VARCHAR(255),
                    {U['age']} INTEGER,
                    {U['preferences']} TEXT,
                    {U['last_quick_message']} TIMESTAMPTZ,
                    {U['last_auto_message']} TIMESTAMPTZ,
                    {U['last_stats_reminder']} TIMESTAMPTZ,
                    {U['last_preference_ask']} TIMESTAMPTZ,
                    {U['last_holiday_mention']} TIMESTAMPTZ,
                    {U['last_drink_warning']} TIMESTAMPTZ,
                    {U['last_activity']} TIMESTAMPTZ DEFAULT NOW(),
                    {U['created_at']} TIMESTAMPTZ DEFAULT NOW(),
                    {U['updated_at']} TIMESTAMPTZ DEFAULT NOW(),
                    {U['tg_id']} BIGINT UNIQUE,
                    {U['quick_message_sent']} BOOLEAN DEFAULT TRUE,
                    {U['gender']} VARCHAR(10)
                )
            """))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
            conn.execute(DDL(f"""
                CREATE TABLE IF NOT EXISTS {MESSAGES_TABLE} (
                    {M['id']} SERIAL PRIMARY KEY,
                    {M['chat_id']} BIGINT NOT NULL,
                    {M['user_tg_id']} BIGINT NOT NULL,
                    {M['role']} VARCHAR(20) NOT NULL,
                    {M['content']} TEXT NOT NULL,
                    {M['message_id']} BIGINT,
                    {M['reply_to_message_id']} BIGINT,
                    {M['sticker_sent']} VARCHAR(50),
                    {M['created_at']} TIMESTAMPTZ DEFAULT NOW()
                )
            """))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏
            conn.execute(DDL(f"""
                CREATE TABLE IF NOT EXISTS katya_free_drinks (
                    id SERIAL PRIMARY KEY,
                    chat_id BIGINT NOT NULL,
                    drinks_count INTEGER DEFAULT 0,
                    last_reset TIMESTAMPTZ DEFAULT NOW(),
                    created_at TIMESTAMPTZ DEFAULT NOW()
                )
            """))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–∏—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            conn.execute(DDL(f"""
                CREATE TABLE IF NOT EXISTS user_drinks (
                    id SERIAL PRIMARY KEY,
                    user_tg_id BIGINT NOT NULL,
                    chat_id BIGINT NOT NULL,
                    drink_type VARCHAR(50) NOT NULL,
                    amount INTEGER NOT NULL,
                    unit VARCHAR(20) NOT NULL,
                    created_at TIMESTAMPTZ DEFAULT NOW()
                )
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ quick_message_sent –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS quick_message_sent BOOLEAN DEFAULT TRUE"))
            
            logger.info("Database initialized successfully")
            
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
        raise

# -----------------------------
# FastAPI startup/shutdown events
# -----------------------------

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        run_migrations()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await telegram_app.initialize()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(CommandHandler("help", help_command))
        telegram_app.add_handler(CommandHandler("stats", stats_command))
        telegram_app.add_handler(CommandHandler("gift", gift_command))
        telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, msg_handler))
        telegram_app.add_handler(PreCheckoutQueryHandler(pre_checkout_callback))
        telegram_app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        asyncio.create_task(ping_scheduler())
        asyncio.create_task(quick_message_scheduler(bot))
        asyncio.create_task(auto_message_scheduler(bot))
        
        logger.info("Application started successfully")
        
    except Exception as e:
        logger.error(f"Failed to start application: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        await telegram_app.shutdown()
        logger.info("Application shutdown completed")
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# -----------------------------

@safe_execute
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    save_user(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = get_user_name(update.message.from_user.id) or "–¥—Ä—É–≥"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞
    greeting = generate_gender_appropriate_greeting(user_name, get_user_gender(update.message.from_user.id))
    
    await update.message.reply_text(greeting)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    save_message(
        update.message.chat_id, 
        update.message.from_user.id, 
        "assistant", 
        greeting, 
        None, 
        None, 
        None
    )

@safe_execute
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return
    
    help_text = """
 **–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è –°–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞!**

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û–±—â–∞—Ç—å—Å—è –∏ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å üòâ
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–∞–ø–∏—Ç–∫–∏ –∏ –≤—ã–ø–∏–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ
‚Ä¢ –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–µ–≥–æ –≤—ã–ø–∏—Ç–æ–≥–æ üìä
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö
‚Ä¢ –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã üéÆ

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–∏—Ç–æ–≥–æ
/gift - –ü–æ–¥–∞—Ä–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –ö–∞—Ç–µ

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –æ—Ç–≤–µ—á—É! –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, —á—Ç–æ –ø—å–µ—à—å, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏ —Ç.–¥.

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
–ù–∞–ø–∏—à–∏ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç—ã –≤—ã–ø–∏–ª —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞ –Ω–µ–¥–µ–ª—é!

**–ü–æ–¥–∞—Ä–∫–∏:**
–ò—Å–ø–æ–ª—å–∑—É–π /gift —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –º–Ω–µ –Ω–∞–ø–∏—Ç–æ–∫!

–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòò
    """
    
    await update.message.reply_text(help_text)

@safe_execute
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    if not update.message:
        return
    
    user_tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = generate_drinks_stats(user_tg_id)
    
    await update.message.reply_text(f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ:**\n\n{stats}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    save_message(chat_id, user_tg_id, "assistant", f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ:**\n\n{stats}", None, None, None)

@safe_execute
async def gift_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gift"""
    if not update.message:
        return
    
    user_tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫
    await send_gift_request(context.bot, chat_id, user_tg_id)

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------

@safe_execute
async def msg_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await handle_user_message(update, context)

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
# -----------------------------

@safe_execute
async def pre_checkout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    query = update.pre_checkout_query
    await query.answer(ok=True)

@safe_execute
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    await handle_successful_payment(update, context)

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏
# -----------------------------

def can_katya_drink_free(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"""
    try:
        with engine.begin() as conn:
            result = conn.execute(
                text("SELECT drinks_count FROM katya_free_drinks WHERE chat_id = :chat_id"),
                {"chat_id": chat_id}
            ).fetchone()
            
            if result:
                return result[0] < 5  # –ú–∞–∫—Å–∏–º—É–º 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                conn.execute(
                    text("INSERT INTO katya_free_drinks (chat_id, drinks_count) VALUES (:chat_id, 0)"),
                    {"chat_id": chat_id}
                )
                return True
    except Exception as e:
        logger.error(f"Error checking free drinks: {e}")
        return False

def increment_katya_drinks(chat_id: int) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("UPDATE katya_free_drinks SET drinks_count = drinks_count + 1 WHERE chat_id = :chat_id"),
                {"chat_id": chat_id}
            )
    except Exception as e:
        logger.error(f"Error incrementing drinks: {e}")

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
# -----------------------------

async def send_sticker_by_command(chat_id: int, command: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    try:
        if command in STICKERS:
            sticker_id = STICKERS[command]
            await bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
            logger.info(f"Sent sticker {command} to chat {chat_id}")
        else:
            logger.warning(f"Unknown sticker command: {command}")
    except Exception as e:
        logger.error(f"Error sending sticker {command}: {e}")

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
# -----------------------------

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
# -----------------------------

def generate_drinks_stats(user_tg_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–∏—Ç–æ–≥–æ"""
    try:
        with engine.begin() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_stats = conn.execute(
                text("""
                    SELECT drink_type, SUM(amount) as total_amount, unit
                    FROM user_drinks
                    WHERE user_tg_id = :user_tg_id
                    AND DATE(created_at) = CURRENT_DATE
                    GROUP BY drink_type, unit
                    ORDER BY total_amount DESC
                """),
                {"user_tg_id": user_tg_id}
            ).fetchall()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_stats = conn.execute(
                text("""
                    SELECT drink_type, SUM(amount) as total_amount, unit
                    FROM user_drinks
                    WHERE user_tg_id = :user_tg_id
                    AND created_at >= CURRENT_DATE - INTERVAL '7 days'
                    GROUP BY drink_type, unit
                    ORDER BY total_amount DESC
                """),
                {"user_tg_id": user_tg_id}
            ).fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = "**–°–µ–≥–æ–¥–Ω—è:**\n"
            if today_stats:
                for stat in today_stats:
                    stats_text += f"‚Ä¢ {stat[0]}: {stat[1]} {stat[2]}\n"
            else:
                stats_text += "‚Ä¢ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∏—Ç–æ\n"
            
            stats_text += "\n**–ó–∞ –Ω–µ–¥–µ–ª—é:**\n"
            if week_stats:
                for stat in week_stats:
                    stats_text += f"‚Ä¢ {stat[0]}: {stat[1]} {stat[2]}\n"
            else:
                stats_text += "‚Ä¢ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∏—Ç–æ\n"
            
            return stats_text
            
    except Exception as e:
        logger.error(f"Error generating stats: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ"

def save_drink_record(user_tg_id: int, chat_id: int, drink_info: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–∏—Ç–æ–º"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("""
                    INSERT INTO user_drinks (user_tg_id, chat_id, drink_type, amount, unit)
                    VALUES (:user_tg_id, :chat_id, :drink_type, :amount, :unit)
                """),
                {
                    "user_tg_id": user_tg_id,
                    "chat_id": chat_id,
                    "drink_type": drink_info["drink_type"],
                    "amount": drink_info["amount"],
                    "unit": drink_info["unit"]
                }
            )
    except Exception as e:
        logger.error(f"Error saving drink record: {e}")

def should_remind_about_stats(user_tg_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    try:
        with engine.begin() as conn:
            result = conn.execute(
                text(f"SELECT last_stats_reminder FROM {USERS_TABLE} WHERE user_tg_id = :user_tg_id"),
                {"user_tg_id": user_tg_id}
            ).fetchone()
            
            if result and result[0]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
                return (datetime.now() - result[0]).total_seconds() > 86400
            else:
                return True
    except Exception as e:
        logger.error(f"Error checking stats reminder: {e}")
        return False

def update_stats_reminder(user_tg_id: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text(f"UPDATE {USERS_TABLE} SET last_stats_reminder = NOW() WHERE user_tg_id = :user_tg_id"),
                {"user_tg_id": user_tg_id}
            )
    except Exception as e:
        logger.error(f"Error updating stats reminder: {e}")

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–æ–º
# -----------------------------

def generate_gender_appropriate_greeting(name: str, gender: Optional[str] = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞"""
    if gender == "male":
        return f"–ü—Ä–∏–≤–µ—Ç, {name}! –†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòò"
    elif gender == "female":
        return f"–ü—Ä–∏–≤–µ—Ç, {name}! –†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"
    else:
        return f"–ü—Ä–∏–≤–µ—Ç, {name}! –†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòò"

# -----------------------------
# FastAPI endpoints
# -----------------------------

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Drinking Buddy Bot API",
        "status": "running",
        "version": "1.0.0",
        "endpoints": {
            "health": "/health",
            "metrics": "/metrics",
            "webhook": "/webhook/{bot_token} (POST)"
        },
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.get("/metrics")
async def get_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {
        "error_counts": dict(error_counts),
        "last_error_times": {k: datetime.fromtimestamp(v).isoformat() for k, v in last_error_time.items()},
        "timestamp": datetime.now().isoformat()
    }

@app.post("/webhook/{bot_token}")
async def webhook(bot_token: str, request: Request):
    """Webhook –¥–ª—è Telegram"""
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# -----------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# -----------------------------

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=10000)