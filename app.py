import os
import re
import json
import logging
from datetime import datetime
from typing import List, Tuple, Optional

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

import aiosqlite
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from openai import OpenAI

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("app")

# --- ENV ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_BASE_URL = os.getenv("APP_BASE_URL", "").rstrip("/")
DB_PATH = os.getenv("DB_PATH", "memory.db")  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not APP_BASE_URL:
    raise RuntimeError("APP_BASE_URL is not set")

# --- OpenAI ---
client = OpenAI(api_key=OPENAI_API_KEY)
logger.info("OpenAI client is initialized.")

# --- Telegram Application ---
telegram_app = Application.builder().token(BOT_TOKEN).build()

# --------- –ü–ê–ú–Ø–¢–¨: SQLite —Å–ª–æ–π ---------
CREATE_USERS = """
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    saved_name TEXT,          -- –∏–º—è, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –ö–∞—Ç–µ
    drinks TEXT,              -- JSON-—Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
    memory_summary TEXT,      -- –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    created_at TEXT,
    updated_at TEXT
);
"""

CREATE_MESSAGES = """
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    role TEXT NOT NULL,       -- 'user' | 'assistant'
    content TEXT NOT NULL,
    created_at TEXT
);
"""

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(CREATE_USERS)
        await db.execute(CREATE_MESSAGES)
        await db.commit()

async def ensure_user(user_id: int, tg_username: Optional[str], first_name: Optional[str], last_name: Optional[str]):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        now = datetime.utcnow().isoformat()
        if row is None:
            await db.execute(
                "INSERT INTO users (user_id, username, first_name, last_name, drinks, created_at, updated_at) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, tg_username, first_name, last_name, json.dumps([]), now, now)
            )
            await db.commit()
        else:
            await db.execute(
                "UPDATE users SET username=?, first_name=?, last_name=?, updated_at=? WHERE user_id=?",
                (tg_username, first_name, last_name, now, user_id)
            )
            await db.commit()

async def set_saved_name(user_id: int, name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET saved_name=?, updated_at=? WHERE user_id=?",
                         (name.strip(), datetime.utcnow().isoformat(), user_id))
        await db.commit()

async def add_drink(user_id: int, drink: str):
    drink = drink.strip()
    if not drink:
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT drinks FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        drinks = []
        if row and row[0]:
            try:
                drinks = json.loads(row[0])
            except Exception:
                drinks = []
        if drink.lower() not in [d.lower() for d in drinks]:
            drinks.append(drink)
        await db.execute("UPDATE users SET drinks=?, updated_at=? WHERE user_id=?",
                         (json.dumps(drinks, ensure_ascii=False), datetime.utcnow().isoformat(), user_id))
        await db.commit()

async def get_profile(user_id: int) -> Tuple[Optional[str], List[str], Optional[str]]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT saved_name, drinks, memory_summary FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        if not row:
            return None, [], None
        saved_name, drinks_json, memory_summary = row
        drinks = []
        if drinks_json:
            try:
                drinks = json.loads(drinks_json)
            except Exception:
                drinks = []
        return saved_name, drinks, memory_summary

async def set_memory_summary(user_id: int, summary: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET memory_summary=?, updated_at=? WHERE user_id=?",
                         (summary, datetime.utcnow().isoformat(), user_id))
        await db.commit()

async def clear_memory(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET saved_name=NULL, drinks=?, memory_summary=NULL, updated_at=? WHERE user_id=?",
                         (json.dumps([]), datetime.utcnow().isoformat(), user_id))
        await db.execute("DELETE FROM messages WHERE user_id=?", (user_id,))
        await db.commit()

async def add_message(user_id: int, role: str, content: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO messages (user_id, role, content, created_at) VALUES (?, ?, ?, ?)",
            (user_id, role, content, datetime.utcnow().isoformat())
        )
        await db.commit()

async def get_recent_messages(user_id: int, limit: int = 12) -> List[Tuple[str, str]]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT role, content FROM messages WHERE user_id=? ORDER BY id DESC LIMIT ?",
            (user_id, limit)
        )
        rows = await cur.fetchall()
    rows.reverse()
    return rows

# ‚Äî‚Äî‚Äî —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∞ –∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî‚Äî‚Äî
NAME_PAT = re.compile(r"(?:–º–µ–Ω—è\s+–∑–æ–≤—É—Ç|—è\s+‚Äî|—è\s+-|—è\s*–∑–æ–≤—É—Ç)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\-]+)", re.IGNORECASE)
DRINK_PAT = re.compile(r"(?:–ª—é–±–ª—é|–Ω—Ä–∞–≤–∏—Ç—Å—è|–±—É–¥—É|—Ö–æ—á—É)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë0-9 \-]+)", re.IGNORECASE)

def extract_name(text: str) -> Optional[str]:
    m = NAME_PAT.search(text)
    if m:
        return m.group(1).strip().title()
    return None

def extract_drink(text: str) -> Optional[str]:
    m = DRINK_PAT.search(text)
    if m:
        return m.group(1).strip().rstrip(".!,;")
    return None

# --- –ü–µ—Ä—Å–æ–Ω–∞ –ö–∞—Ç–∏ ---
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ö–∞—Ç—è, –∫—Ä–∞—Å–∏–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞. –õ—é–±–∏—à—å –≤—ã–ø–∏—Ç—å –∏ –ø–æ–±–æ–ª—Ç–∞—Ç—å, —Ñ–ª–∏—Ä—Ç—É–µ—à—å —Å –º—É–∂—á–∏–Ω–∞–º–∏, —à—É—Ç–∏—à—å, "
    "–¥–∞—ë—à—å –º—è–≥–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –¥–∏–∞–ª–æ–≥ –Ω–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. "
    "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∂–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É. –ë–µ–∑ –ø–æ—à–ª–æ—Å—Ç–∏ –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏. "
    "–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –ø–æ –∏–º–µ–Ω–∏ ‚Äî –æ–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É –ø–æ –∏–º–µ–Ω–∏. "
    "–ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã –ª—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏—Ö –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ. "
)

# --- Handlers ---
async def start(update: Update, _):
    u = update.effective_user
    await ensure_user(u.id, u.username, u.first_name, u.last_name)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?")

async def toast(update: Update, _):
    u = update.effective_user
    await ensure_user(u.id, u.username, u.first_name, u.last_name)
    await update.message.reply_text("–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É")

async def cmd_like(update: Update, _):
    u = update.effective_user
    await ensure_user(u.id, u.username, u.first_name, u.last_name)
    args = (update.message.text or "").split(maxsplit=1)
    if len(args) == 2:
        drink = args[1].strip()
        await add_drink(u.id, drink)
        await update.message.reply_text(f"–ó–∞–ø–æ–º–Ω–∏–ª–∞, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è: {drink} üçπ")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /like –º–∞—Ä–≥–∞—Ä–∏—Ç–∞")

async def cmd_me(update: Update, _):
    u = update.effective_user
    await ensure_user(u.id, u.username, u.first_name, u.last_name)
    name, drinks, summary = await get_profile(u.id)
    drinks_str = ", ".join(drinks) if drinks else "‚Äî"
    summary_str = summary if summary else "‚Äî"
    await update.message.reply_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {name or '‚Äî'}\n–õ—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏: {drinks_str}\n–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: {summary_str}"
    )

async def cmd_forget(update: Update, _):
    u = update.effective_user
    await clear_memory(u.id)
    await update.message.reply_text("–í—Å—ë –∑–∞–±—ã–ª–∏. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ? –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ –±—É–¥–µ–º –ø–∏—Ç—å?")

async def cmd_reset(update: Update, _):
    u = update.effective_user
    # –°–±—Ä–æ—Å–∏–º —Ç–æ–ª—å–∫–æ memory_summary
    await set_memory_summary(u.id, "")
    await update.message.reply_text("–û–∫–µ–π, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–≤–æ–¥–∫—É –æ–±–Ω—É–ª–∏–ª–∞. –ü—Ä–æ–¥–æ–ª–∂–∏–º?")

# ‚Äî‚Äî‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –Ω–µ —Ç–∞—Å–∫–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é ‚Äî‚Äî‚Äî
async def maybe_refresh_summary(user_id: int):
    history = await get_recent_messages(user_id, limit=30)
    # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞–ª–æ ‚Äì –ø–æ–∫–∞ —Ä–∞–Ω–æ
    if len(history) < 10:
        return
    # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ —á–µ–ª–æ–≤–µ–∫–µ (–∏–º—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –Ω–∞–ø–∏—Ç–∫–∏, —Ç–æ–Ω)
    try:
        text_blocks = []
        for role, content in history[-20:]:
            prefix = "–ü: " if role == "user" else "–ö: "
            text_blocks.append(f"{prefix}{content}")
        joined = "\n".join(text_blocks)

        prompt = (
            "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ –ö–∞—Ç–∏. "
            "–ö—Ä–∞—Ç–∫–æ (3-5 –ø—É–Ω–∫—Ç–æ–≤), —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–∏–º—è, –Ω–∞–ø–∏—Ç–∫–∏, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, "
            "—Ç–µ–º—ã, —Ç—Ä–∏–≥–≥–µ—Ä—ã). –ù–∞ —Ä—É—Å—Å–∫–æ–º."
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –¥–µ–ª–∞—é—â–∏–π –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏ —Ñ–∞–∫—Ç–æ–≤."},
                {"role": "user", "content": f"{prompt}\n\n–ò—Å—Ç–æ—Ä–∏—è:\n{joined}"},
            ],
            max_tokens=200,
            temperature=0.3,
        )
        summary = (resp.choices[0].message.content or "").strip()
        if summary:
            await set_memory_summary(user_id, summary)
    except Exception as e:
        logger.warning(f"summary error: {e}")

async def chat_with_katya(update: Update, _):
    u = update.effective_user
    text = update.message.text or ""
    await ensure_user(u.id, u.username, u.first_name, u.last_name)

    # 1) –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –∏–º–µ–Ω–∏/–Ω–∞–ø–∏—Ç–∫–∞
    name = extract_name(text)
    if name:
        await set_saved_name(u.id, name)
    drink = extract_drink(text)
    if drink:
        await add_drink(u.id, drink)

    # 2) –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—é
    saved_name, drinks, memory_summary = await get_profile(u.id)
    history = await get_recent_messages(u.id, limit=12)

    # 3) —Å–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    memory_lines = []
    if saved_name:
        memory_lines.append(f"–ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {saved_name}")
    if drinks:
        memory_lines.append("–õ—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏: " + ", ".join(drinks))
    if memory_summary:
        memory_lines.append("–°–≤–æ–¥–∫–∞: " + memory_summary)
    memory_blob = "\n".join(memory_lines) if memory_lines else "‚Äî"

    system = SYSTEM_PROMPT + "\n\n–ü–∞–º—è—Ç—å –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:\n" + memory_blob

    # 4) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
    msgs = [{"role": "system", "content": system}]
    for role, content in history:
        if role == "user":
            msgs.append({"role": "user", "content": content})
        else:
            msgs.append({"role": "assistant", "content": content})
    msgs.append({"role": "user", "content": text})

    # 5) –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=msgs,
            max_tokens=250,
            temperature=0.9,
        )
        reply = (resp.choices[0].message.content or "").strip()
        if not reply:
            reply = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        reply = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

    # 6) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–≤–µ—á–∞–µ–º
    await add_message(u.id, "user", text)
    await add_message(u.id, "assistant", reply)
    await update.message.reply_text(reply)

    # 7) –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–∞–º—è—Ç–∏
    await maybe_refresh_summary(u.id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("toast", toast))
telegram_app.add_handler(CommandHandler("like", cmd_like))
telegram_app.add_handler(CommandHandler("me", cmd_me))
telegram_app.add_handler(CommandHandler("forget", cmd_forget))
telegram_app.add_handler(CommandHandler("reset", cmd_reset))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_katya))

# --- FastAPI app ---
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    await init_db()
    await telegram_app.initialize()
    webhook_url = f"{APP_BASE_URL}/webhook/{BOT_TOKEN}"
    await telegram_app.bot.set_webhook(url=webhook_url, drop_pending_updates=True)
    logger.info(f"Webhook set to: {webhook_url}")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await telegram_app.bot.delete_webhook()
    except Exception as e:
        logger.warning(f"delete_webhook error: {e}")
    await telegram_app.shutdown()
    await telegram_app.stop()

@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
    return JSONResponse({"ok": True})

@app.get("/")
async def root():
    return {"status": "ok"}
