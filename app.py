import os
import httpx
import re
import logging
from datetime import datetime
from typing import Optional
import asyncio
from datetime import datetime, timedelta

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse
from pydantic import BaseModel

from sqlalchemy import create_engine, text, DDL
from sqlalchemy.engine import Engine

from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters, CommandHandler, CallbackQueryHandler, PreCheckoutQueryHandler

from openai import OpenAI

from config import DATABASE_URL, OPENAI_API_KEY, BOT_TOKEN, RENDER_EXTERNAL_URL
from constants import (
    STICKERS, DRINK_KEYWORDS, DB_FIELDS, FALLBACK_OPENAI_UNAVAILABLE,
    USERS_TABLE, MESSAGES_TABLE, BEER_STICKERS, STICKER_TRIGGERS
)

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã –ë–î
# -----------------------------
U = DB_FIELDS["users"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å
M = DB_FIELDS["messages"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logger = logging.getLogger("app")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
# -----------------------------
engine: Engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
logger.info("‚úÖ Database engine created")

def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    with engine.begin() as conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        conn.execute(DDL(f"""
            CREATE TABLE IF NOT EXISTS {USERS_TABLE} (
                id SERIAL PRIMARY KEY,
                user_tg_id BIGINT UNIQUE NOT NULL,
                chat_id BIGINT NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                age INTEGER,
                created_at TIMESTAMPTZ DEFAULT NOW()
            )
        """))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã messages
        conn.execute(DDL(f"""
            CREATE TABLE IF NOT EXISTS {MESSAGES_TABLE} (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                user_tg_id BIGINT NOT NULL,
                role TEXT NOT NULL,
                content TEXT NOT NULL,
                created_at TIMESTAMPTZ DEFAULT NOW(),
                reply_to_message_id INTEGER,
                message_id INTEGER,
                sticker_sent TEXT
            )
        """))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É chat_id –∫ users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(DDL(f"""
                ALTER TABLE {USERS_TABLE} 
                ADD COLUMN IF NOT EXISTS chat_id BIGINT NOT NULL DEFAULT 0
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É user_tg_id –∫ users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(DDL(f"""
                ALTER TABLE {USERS_TABLE} 
                ADD COLUMN IF NOT EXISTS user_tg_id BIGINT UNIQUE
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É age –∫ users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(DDL(f"""
                ALTER TABLE {USERS_TABLE} 
                ADD COLUMN IF NOT EXISTS age INTEGER
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É user_tg_id –∫ messages –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(DDL(f"""
                ALTER TABLE {MESSAGES_TABLE} 
                ADD COLUMN IF NOT EXISTS user_tg_id BIGINT NOT NULL DEFAULT 0
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É message_id –∫ messages –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(DDL(f"""
                ALTER TABLE {MESSAGES_TABLE} 
                ADD COLUMN IF NOT EXISTS message_id INTEGER
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É reply_to_message_id –∫ messages –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(DDL(f"""
                ALTER TABLE {MESSAGES_TABLE} 
                ADD COLUMN IF NOT EXISTS reply_to_message_id INTEGER
            """))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É sticker_sent –∫ messages –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(DDL(f"""
                ALTER TABLE {MESSAGES_TABLE} 
                ADD COLUMN IF NOT EXISTS sticker_sent TEXT
            """))
            
        except Exception as e:
            logger.warning(f"Some columns might already exist: {e}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏
        conn.execute(DDL(f"""
            CREATE TABLE IF NOT EXISTS katya_free_drinks (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                drinks_used INTEGER DEFAULT 0,
                date_reset DATE DEFAULT CURRENT_DATE,
                created_at TIMESTAMPTZ DEFAULT NOW()
            )
        """))
    
    logger.info("‚úÖ Database tables created/verified")

# -----------------------------
# OpenAI –∫–ª–∏–µ–Ω—Ç
# -----------------------------
client: Optional[OpenAI] = None
if OPENAI_API_KEY:
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        logger.info("‚úÖ OpenAI client initialized")
    except Exception as e:
        logger.exception("OpenAI init failed: %s", e)
else:
    logger.warning("OPENAI_API_KEY is empty ‚Äî –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Å –∑–∞–≥–ª—É—à–∫–æ–π")

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏
# -----------------------------

def get_katya_drinks_count(chat_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    with engine.begin() as conn:
        result = conn.execute(text(f"""
            SELECT drinks_used FROM katya_free_drinks 
            WHERE chat_id = :chat_id AND date_reset = CURRENT_DATE
        """), {"chat_id": chat_id}).fetchone()
        
        if result:
            return result[0]
        return 0

def increment_katya_drinks(chat_id: int) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    with engine.begin() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        result = conn.execute(text(f"""
            SELECT id FROM katya_free_drinks 
            WHERE chat_id = :chat_id AND date_reset = CURRENT_DATE
        """), {"chat_id": chat_id}).fetchone()
        
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            conn.execute(text(f"""
                UPDATE katya_free_drinks 
                SET drinks_used = drinks_used + 1 
                WHERE chat_id = :chat_id AND date_reset = CURRENT_DATE
            """), {"chat_id": chat_id})
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            conn.execute(text(f"""
                INSERT INTO katya_free_drinks (chat_id, drinks_used, date_reset) 
                VALUES (:chat_id, 1, CURRENT_DATE)
            """), {"chat_id": chat_id})

def can_katya_drink_free(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –≤—ã–ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–ª–∏–º–∏—Ç 5 –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ –¥–µ–Ω—å)"""
    return get_katya_drinks_count(chat_id) < 5

# -----------------------------
# Telegram Application
# -----------------------------
if not BOT_TOKEN:
    logger.error("BOT_TOKEN is empty (webhook/–±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç)")

tapp: Optional[Application] = None

async def ping_scheduler():
    """Ping-–±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render"""
    while True:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            
            # –õ–æ–≥–∏—Ä—É–µ–º ping
            logger.info("üîÑ Ping: keeping app alive")
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ
            async with httpx.AsyncClient() as client:
                try:
                    response = await client.get("https://drinking-buddy-bot.onrender.com/")
                    logger.info(f"‚úÖ Self-ping successful: {response.status_code}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Self-ping failed: {e}")
                    
        except Exception as e:
            logger.exception(f"‚ùå Ping scheduler error: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

def build_application() -> Application:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is not set")
    app_ = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app_.add_handler(CommandHandler("gift", gift_command))
    app_.add_handler(CallbackQueryHandler(gift_callback, pattern="^(gift_|gift_menu)"))
    app_.add_handler(PreCheckoutQueryHandler(pre_checkout_query))
    app_.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app_.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, msg_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ping-–±–æ—Ç –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(ping_scheduler())
    
    return app_

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã –ë–î
# -----------------------------
U = DB_FIELDS["users"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å
M = DB_FIELDS["messages"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å

def upsert_user_from_update(update: Update) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Update"""
    if not update.message or not update.message.from_user:
        return

    tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    last_name = update.message.from_user.last_name

    with engine.begin() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ PRIMARY KEY (tg_id)
        existing = conn.execute(
            text(f"SELECT tg_id FROM {USERS_TABLE} WHERE tg_id = :tg_id"),
            {"tg_id": tg_id},
        ).fetchone()

        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute(
                text(f"""
                    UPDATE {USERS_TABLE}
                    SET {U['username']} = :username, {U['first_name']} = :first_name, {U['last_name']} = :last_name, {U['chat_id']} = :chat_id, {U['user_tg_id']} = :tg_id
                    WHERE tg_id = :tg_id
                """),
                {
                    "tg_id": tg_id,
                    "chat_id": chat_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                },
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute(
                text(f"""
                    INSERT INTO {USERS_TABLE} ({U['user_tg_id']}, {U['chat_id']}, {U['username']}, {U['first_name']}, {U['last_name']}, tg_id)
                    VALUES (:tg_id, :chat_id, :username, :first_name, :last_name, :tg_id)
                """),
                {
                    "tg_id": tg_id,
                    "chat_id": chat_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                },
            )

def save_message(chat_id: int, user_tg_id: int, role: str, content: str, message_id: Optional[int] = None, reply_to_message_id: Optional[int] = None, sticker_sent: Optional[str] = None) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                INSERT INTO {MESSAGES_TABLE} ({M['chat_id']}, {M['user_tg_id']}, {M['role']}, {M['content']}, {M['message_id']}, {M['reply_to_message_id']}, sticker_sent)
                VALUES (:chat_id, :user_tg_id, :role, :content, :message_id, :reply_to_message_id, :sticker_sent)
            """),
            {
                "chat_id": chat_id,
                "user_tg_id": user_tg_id,
                "role": role,
                "content": content,
                "message_id": message_id,
                "reply_to_message_id": reply_to_message_id,
                "sticker_sent": sticker_sent,
            },
        )

def get_user_age(user_tg_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    with engine.begin() as conn:
        row = conn.execute(
            text(f"SELECT {U['age']} FROM {USERS_TABLE} WHERE {U['user_tg_id']} = :tg_id"),
            {"tg_id": user_tg_id},
        ).fetchone()
        age = row[0] if row and row[0] else None
        logger.info(f"Retrieved age for user {user_tg_id}: {age}")
        return age

def update_user_age(user_tg_id: int, age: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                UPDATE {USERS_TABLE}
                SET {U['age']} = :age
                WHERE {U['user_tg_id']} = :tg_id
            """),
            {"tg_id": user_tg_id, "age": age},
        )
        logger.info(f"Updated age for user {user_tg_id} to {age}")

def get_recent_messages(chat_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    with engine.begin() as conn:
        rows = conn.execute(
            text(f"""
                SELECT {M['role']}, {M['content']} 
                FROM {MESSAGES_TABLE} 
                WHERE {M['chat_id']} = :chat_id 
                ORDER BY {M['created_at']} DESC 
                LIMIT :limit
            """),
            {"chat_id": chat_id, "limit": limit},
        ).fetchall()
        return [{"role": row[0], "content": row[1]} for row in rows]

def parse_age_from_text(text: str) -> Optional[int]:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–º–Ω–µ 25 –ª–µ—Ç", "25 –ª–µ—Ç", "—è 25-–ª–µ—Ç–Ω–∏–π" –∏ —Ç.–ø.
    patterns = [
        r'–º–Ω–µ\s+(\d+)\s+–ª–µ—Ç',
        r'(\d+)\s+–ª–µ—Ç',
        r'—è\s+(\d+)[-]?–ª–µ—Ç–Ω–∏–π',
        r'(\d+)[-]?–ª–µ—Ç–Ω–∏–π',
        r'–≤–æ–∑—Ä–∞—Å—Ç\s+(\d+)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text.lower())
        if match:
            try:
                age = int(match.group(1))
                if 1 <= age <= 150:  # —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤–æ–∑—Ä–∞—Å—Ç–∞
                    logger.info(f"Parsed age from text '{text}': {age}")
                    return age
            except ValueError:
                continue
    
    return None

async def send_beer_sticker(chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø–∏–≤–∞ —á–µ—Ä–µ–∑ Telegram API"""
    if not BOT_TOKEN or not BEER_STICKERS:
        return
    
    sticker_id = BEER_STICKERS[0]  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendSticker",
                json={
                    "chat_id": chat_id,
                    "sticker": sticker_id
                }
            )
            if response.status_code == 200:
                logger.info("‚úÖ Beer sticker sent successfully")
            else:
                logger.warning("Failed to send sticker: %s", response.text)
        except Exception as e:
            logger.exception("Error sending sticker: %s", e)

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
# -----------------------------
def load_context() -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Context.txt"""
    try:
        with open("Context.txt", "r", encoding="utf-8") as f:
            content = f.read().strip()
            logger.info(f"Loaded context: {content[:100]}...")
            return content
    except Exception as e:
        logger.exception("Failed to load context from Context.txt")
        return "–¢—ã ‚Äî –ö–∞—Ç—è –°–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞: –∂–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç—É–µ—à—å, –ª—é–±–∏—à—å –ø–æ—à—É—Ç–∏—Ç—å –∏ –≤—ã–ø–∏—Ç—å. –¢—ã –ª—é–±–∏—à—å –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∑–∞ —Ä—é–º–æ—á–∫—É. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç –∞–ª–∫–æ–≥–æ–ª—å - —Ç—ã –≤—Å–µ–≥–¥–∞ —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è –∏ —Ä–∞–¥—É–µ—à—å—Å—è."

SYSTEM_PROMPT = load_context()

def get_user_name(user_tg_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    with engine.begin() as conn:
        row = conn.execute(
            text(f"SELECT {U['first_name']} FROM {USERS_TABLE} WHERE {U['user_tg_id']} = :tg_id"),
            {"tg_id": user_tg_id},
        ).fetchone()
        return row[0] if row and row[0] else None

async def llm_reply(user_text: str, username: Optional[str], user_tg_id: int, chat_id: int) -> tuple[str, Optional[str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—Ç–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞_—Å—Ç–∏–∫–µ—Ä–∞_–∏–ª–∏_None)
    """
    if client is None:
        return FALLBACK_OPENAI_UNAVAILABLE, None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_age = get_user_age(user_tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_messages = get_recent_messages(chat_id, limit=5)
        
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user_age:
            messages.append({"role": "system", "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_age} –ª–µ—Ç."})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        user_name = get_user_name(user_tg_id)
        if user_name:
            messages.append({"role": "system", "content": f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É –ø–æ –∏–º–µ–Ω–∏, –∞ –Ω–µ –ø–æ username."})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        for msg in reversed(recent_messages[-3:]):  # —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            messages.append(msg)
        
        messages.append({"role": "user", "content": user_text})
        
        logger.info(f"LLM request for user {user_tg_id}: {len(messages)} messages, age: {user_age}, name: {user_name}")

        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.3,  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ –ø–æ—Å–ª—É—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            max_tokens=250,
        )
        
        response_text = resp.choices[0].message.content.strip()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"LLM raw response for user {user_tg_id}: '{response_text}'")
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ò–ö–ï–†–ê –ü–û –ö–û–ù–¢–ï–ö–°–¢–£
        sticker_command = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ LLM
        lower_response = response_text.lower()
        if any(word in lower_response for word in ["–≤–∏–Ω–æ", "–≤–∏–Ω—Ü–∞", "–≤–∏–Ω—Ü–æ", "üç∑"]):
            sticker_command = "[SEND_DRINK_WINE]"
        elif any(word in lower_response for word in ["–≤–æ–¥–∫–∞", "–≤–æ–¥–æ—á–∫–∞", "üç∏"]):
            sticker_command = "[SEND_DRINK_VODKA]"
        elif any(word in lower_response for word in ["–≤–∏—Å–∫–∏", "–≤–∏—Å–∫–∞—Ä—å", "ü•É"]):
            sticker_command = "[SEND_DRINK_WHISKY]"
        elif any(word in lower_response for word in ["–ø–∏–≤–æ", "–ø–∏–≤–∫–∞", "üç∫"]):
            sticker_command = "[SEND_DRINK_BEER]"
        elif any(word in lower_response for word in ["—Ä–∞–¥–æ—Å—Ç—å", "—Ä–∞–¥—É–µ—à—å—Å—è", "–≤–µ—Å–µ–ª–æ", "üòä"]):
            sticker_command = "[SEND_KATYA_HAPPY]"
        elif any(word in lower_response for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "—Ç–æ—Å–∫–∞", "üò¢"]):
            sticker_command = "[SEND_KATYA_SAD]"
        
        if sticker_command:
            logger.info(f"Auto-detected sticker: {sticker_command} for user {user_tg_id}")
        else:
            logger.info(f"No sticker auto-detected for user {user_tg_id}")
        
        return response_text, sticker_command
        
    except Exception as e:
        logger.exception("OpenAI error: %s", e)
        return FALLBACK_OPENAI_UNAVAILABLE, None

async def send_sticker_by_command(chat_id: int, sticker_command: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç LLM"""
    sticker_map = {
        "[SEND_DRINK_VODKA]": STICKERS["DRINK_VODKA"],
        "[SEND_DRINK_WHISKY]": STICKERS["DRINK_WHISKY"], 
        "[SEND_DRINK_WINE]": STICKERS["DRINK_WINE"],
        "[SEND_DRINK_BEER]": STICKERS["DRINK_BEER"],
        "[SEND_KATYA_HAPPY]": STICKERS["KATYA_HAPPY"],
        "[SEND_KATYA_SAD]": STICKERS["KATYA_SAD"],
    }
    
    sticker_id = sticker_map.get(sticker_command)
    if not sticker_id:
        logger.warning(f"Unknown sticker command: {sticker_command}")
        return
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendSticker",
                json={
                    "chat_id": chat_id,
                    "sticker": sticker_id,
                },
            )
            response.raise_for_status()
            logger.info(f"Sent sticker {sticker_command} to chat {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
            if sticker_command.startswith("[SEND_DRINK_"):
                logger.info(f"Alcohol sticker sent, checking gift request for chat {chat_id}")
                # –ü–æ–ª—É—á–∞–µ–º user_tg_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                user_tg_id = get_last_user_tg_id(chat_id)
                logger.info(f"Last user_tg_id for chat {chat_id}: {user_tg_id}")
                
                if user_tg_id:
                    alcohol_count = get_alcohol_sticker_count(user_tg_id)
                    logger.info(f"Alcohol sticker count for user {user_tg_id}: {alcohol_count}")
                    
                    if should_ask_for_gift(user_tg_id):
                        logger.info(f"Should ask for gift! Sending request to chat {chat_id}")
                        await send_gift_request(chat_id, user_tg_id)
                    else:
                        logger.info(f"Not time to ask for gift yet for user {user_tg_id}")
                else:
                    logger.warning(f"No user_tg_id found for chat {chat_id}")
                    
        except Exception as e:
            logger.exception(f"Failed to send sticker {sticker_command}: {e}")

async def gift_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gift - –ø–æ–∫—É–ø–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è –∑–∞ –∑–≤–µ–∑–¥—ã"""
    if not update.message:
        return
    
    chat_id = update.message.chat_id
    user_tg_id = update.message.from_user.id
    
    logger.info(f"Gift command received from user {user_tg_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [
            InlineKeyboardButton("üç∑ –í–∏–Ω–æ (250 ‚≠ê)", callback_data="gift_wine"),
            InlineKeyboardButton("üç∏ –í–æ–¥–∫–∞ (100 ‚≠ê)", callback_data="gift_vodka")
        ],
        [
            InlineKeyboardButton("ü•É –í–∏—Å–∫–∏ (500 ‚≠ê)", callback_data="gift_whisky"),
            InlineKeyboardButton("üç∫ –ü–∏–≤–æ (50 ‚≠ê)", callback_data="gift_beer")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéÅ –í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ö–∞—Ç–∏:\n\n"
        "–ö–∞—Ç—è –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫! üíï",
        reply_markup=reply_markup
    )

async def gift_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    logger.info(f"Gift callback from user {user_id}: {data}")
    
    if data == "gift_menu":
        await show_gift_menu(query)
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö
    drink_info = {
        "gift_wine": {"name": "üç∑ –í–∏–Ω–æ", "stars": 250, "sticker": "[SEND_DRINK_WINE]"},
        "gift_vodka": {"name": "üç∏ –í–æ–¥–∫–∞", "stars": 100, "sticker": "[SEND_DRINK_VODKA]"},
        "gift_whisky": {"name": "ü•É –í–∏—Å–∫–∏", "stars": 500, "sticker": "[SEND_DRINK_WHISKY]"},
        "gift_beer": {"name": "üç∫ –ü–∏–≤–æ", "stars": 50, "sticker": "[SEND_DRINK_BEER]"}
    }
    
    if data not in drink_info:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
        return
    
    drink = drink_info[data]
    
    # –°–æ–∑–¥–∞–µ–º –ü–õ–ê–¢–ï–ñ–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ send_invoice
    from telegram import LabeledPrice
    
    try:
        await query.message.reply_invoice(
            title=f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ö–∞—Ç–∏: {drink['name']}",
            description=f"–ö–∞—Ç—è –±—É–¥–µ—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞! üíï",
            payload=f"gift_{data}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
            currency="XTR",  # Telegram Stars
            prices=[LabeledPrice(f"{drink['name']}", drink['stars'])],
            start_parameter=f"gift_{data}",
            photo_url="https://via.placeholder.com/300x200/FF6B6B/FFFFFF?text=üéÅ+Gift+for+Katya",
            photo_width=300,
            photo_height=200
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            await query.message.delete()
        except Exception as e:
            logger.exception(f"Failed to delete old message: {e}")
            
    except Exception as e:
        logger.exception(f"Failed to send invoice: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def show_gift_menu(query) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [
            InlineKeyboardButton("üç∑ –í–∏–Ω–æ (250 ‚≠ê)", callback_data="gift_wine"),
            InlineKeyboardButton("üç∏ –í–æ–¥–∫–∞ (100 ‚≠ê)", callback_data="gift_vodka")
        ],
        [
            InlineKeyboardButton("ü•É –í–∏—Å–∫–∏ (500 ‚≠ê)", callback_data="gift_whisky"),
            InlineKeyboardButton("üç∫ –ü–∏–≤–æ (50 ‚≠ê)", callback_data="gift_beer")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéÅ –í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ö–∞—Ç–∏:\n\n"
        "–ö–∞—Ç—è –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫! üíï",
        reply_markup=reply_markup
    )

async def pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.pre_checkout_query
    if not query:
        return
    
    logger.info(f"Pre-checkout query: {query.invoice_payload}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    if not update.message or not update.message.successful_payment:
        return
    
    payment = update.message.successful_payment
    user_tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    logger.info(f"Successful payment from user {user_tg_id}: {payment.invoice_payload}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –±—ã–ª –∫—É–ø–ª–µ–Ω
    drink_info = {
        "wine": {"name": "üç∑ –í–∏–Ω–æ", "sticker": "[SEND_DRINK_WINE]", "emoji": "üç∑"},
        "vodka": {"name": "üç∏ –í–æ–¥–∫–∞", "sticker": "[SEND_DRINK_VODKA]", "emoji": "üç∏"},
        "whisky": {"name": "ü•É –í–∏—Å–∫–∏", "sticker": "[SEND_DRINK_WHISKY]", "emoji": "ü•É"},
        "beer": {"name": "üç∫ –ü–∏–≤–æ", "sticker": "[SEND_DRINK_BEER]", "emoji": "üç∫"}
    }
    
    drink_type = payment.invoice_payload
    if drink_type not in drink_info:
        drink_type = "wine"  # fallback
    
    drink = drink_info[drink_type]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–∫—Ä–µ–Ω–Ω—é—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    gratitude_messages = [
        f"üéâ –û–≥–æ! –¢—ã –ø–æ–¥–∞—Ä–∏–ª –º–Ω–µ {drink['name']}!",
        f"üíï –Ø —Ç–∞–∫ —Ä–∞–¥–∞! –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ!",
        f" –¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π! –°–µ–π—á–∞—Å –≤—ã–ø—å—é —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!",
        f"{drink['emoji']} *–≤—ã–ø–∏–≤–∞–µ—Ç* –ú–º–º, –∫–∞–∫ –≤–∫—É—Å–Ω–æ!",
        f"üíñ –¢—ã —Å–¥–µ–ª–∞–ª –º–æ–π –¥–µ–Ω—å! –û–±–Ω–∏–º–∞—é —Ç–µ–±—è! ü§ó"
    ]
    
    for i, message in enumerate(gratitude_messages):
        try:
            await update.message.reply_text(message)
            if i == 0:  # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                await send_sticker_by_command(chat_id, drink['sticker'])
        except Exception as e:
            logger.exception(f"Failed to send gratitude message {i}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    try:
        for message in gratitude_messages:
            save_message(chat_id, user_tg_id, "assistant", message)
    except Exception as e:
        logger.exception(f"Failed to save gratitude messages: {e}")

# -----------------------------
# –•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
async def msg_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return

    text_in = update.message.text
    chat_id = update.message.chat_id
    user_tg_id = update.message.from_user.id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    message_id = update.message.message_id

    logger.info("Received message: %s from user %s", text_in, user_tg_id)

    # 1) –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        upsert_user_from_update(update)
    except Exception:
        logger.exception("Failed to upsert user")

    # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        save_message(chat_id, user_tg_id, "user", text_in, message_id)
    except Exception:
        logger.exception("Failed to save user message")

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age = parse_age_from_text(text_in)
    if age:
        try:
            update_user_age(user_tg_id, age)
            logger.info("Updated user age to %d", age)
        except Exception:
            logger.exception("Failed to update user age")

    # 4) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
    answer, sticker_command = await llm_reply(text_in, username, user_tg_id, chat_id)

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        sent_message = await update.message.reply_text(answer)
    except Exception:
        logger.exception("Failed to send reply")
        return

    # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if sticker_command:
        await send_sticker_by_command(chat_id, sticker_command)
            
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏
        increment_katya_drinks(chat_id)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏
        if not can_katya_drink_free(chat_id):
            # –ö–∞—Ç—è –∏—Å—á–µ—Ä–ø–∞–ª–∞ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
            await send_gift_request(chat_id, user_tg_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä–µ
        save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id, None, sticker_command)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –±–µ–∑ —Å—Ç–∏–∫–µ—Ä–∞
        save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id)

def get_alcohol_sticker_count(user_tg_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with engine.begin() as conn:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–º–∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        result = conn.execute(
            text(f"""
                SELECT COUNT(*) FROM {MESSAGES_TABLE} 
                WHERE {M['user_tg_id']} = :user_tg_id 
                AND {M['role']} = 'assistant'
                AND sticker_sent LIKE '[SEND_DRINK_%'
                AND {M['created_at']} > NOW() - INTERVAL '24 hours'
            """),
            {"user_tg_id": user_tg_id}
        ).fetchone()
        return result[0] if result else 0

def should_ask_for_gift(user_tg_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–∫–∞–∂–¥—ã–µ 3 —Å—Ç–∏–∫–µ—Ä–∞ –∞–ª–∫–æ–≥–æ–ª—è)"""
    count = get_alcohol_sticker_count(user_tg_id)
    should_ask = count > 0 and count % 3 == 0
    logger.info(f"Checking gift request for user {user_tg_id}: count={count}, should_ask={should_ask}")
    return should_ask

async def send_gift_request(chat_id: int, user_tg_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –∫–æ–≥–¥–∞ —É –ö–∞—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"""
    messages = [
        "–Ø –±—ã —Ö–æ—Ç–µ–ª–∞ —Å —Ç–æ–±–æ–π –≤—ã–ø–∏—Ç—å, –Ω–æ —É –º–µ–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–∞–ø–∏—Ç–∫–∏ üòî",
        "–ú–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤—ã–ø–∏—Ç—å? üç∑"
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —á–µ—Ä–µ–∑ Telegram API
    async with httpx.AsyncClient() as client:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º InlineKeyboardMarkup –≤ —Å–ª–æ–≤–∞—Ä—å
            keyboard_dict = {
                "inline_keyboard": [
                    [{"text": "üéÅ –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ö–∞—Ç–µ", "callback_data": "gift_menu"}]
                ]
            }
            
            response = await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": "\n".join(messages),
                    "reply_markup": keyboard_dict
                }
            )
            response.raise_for_status()
            logger.info(f"Sent gift request to chat {chat_id}")
        except Exception as e:
            logger.exception(f"Failed to send gift request: {e}")

def get_last_user_tg_id(chat_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ user_tg_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
    with engine.begin() as conn:
        result = conn.execute(
            text(f"""
                SELECT {M['user_tg_id']} FROM {MESSAGES_TABLE} 
                WHERE {M['chat_id']} = :chat_id 
                ORDER BY {M['created_at']} DESC 
                LIMIT 1
            """),
            {"chat_id": chat_id}
        ).fetchone()
        return result[0] if result else None

# -----------------------------
# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -----------------------------
app = FastAPI()

class TelegramUpdate(BaseModel):
    update_id: int | None = None  # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è ‚Äî –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —Å—ã—Ä–æ–π JSON

@app.get("/", response_class=PlainTextResponse)
async def root():
    return "OK"

@app.post(f"/webhook/{{token}}")
async def telegram_webhook(token: str, request: Request):
    if token != BOT_TOKEN:
        raise HTTPException(status_code=403, detail="Forbidden")

    data = await request.json()
    update = Update.de_json(data, tapp.bot)  # type: ignore
    await tapp.process_update(update)        # type: ignore
    return PlainTextResponse("OK")

# -----------------------------
# –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
# -----------------------------
@app.on_event("startup")
async def on_startup():
    global tapp
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    try:
        init_db()
    except Exception:
        logger.exception("Failed to initialize database")
    
    tapp = build_application()
    await tapp.initialize()
    await tapp.start()

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –º–æ–∂–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π URL
    if RENDER_EXTERNAL_URL:
        try:
            await tapp.bot.set_webhook(f"{RENDER_EXTERNAL_URL}/webhook/{BOT_TOKEN}")
            logger.info("‚úÖ Webhook set to %s/webhook/%s", RENDER_EXTERNAL_URL, BOT_TOKEN)
        except Exception:
            logger.exception("Failed to set webhook")
    else:
        logger.warning("RENDER_EXTERNAL_URL is empty ‚Äî webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def on_shutdown():
    if tapp:
        try:
            await tapp.stop()
        except Exception:
            logger.exception("Error on telegram app stop")
