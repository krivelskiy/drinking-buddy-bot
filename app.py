import os
import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
)
from openai import OpenAI

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN is not set")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY is not set")

# --- OpenAI –∫–ª–∏–µ–Ω—Ç ---
client = OpenAI(api_key=OPENAI_API_KEY)

# --- Telegram Application ---
application = Application.builder().token(BOT_TOKEN).build()

# --- FastAPI ---
app = FastAPI()

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context):
    await update.message.reply_text("üçª –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ —Ç–æ—Å—Ç!")

async def toast(update: Update, context):
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ—Å—Ç –¥–ª—è –¥—Ä—É–∂–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ —Å—Ç–æ–ª–æ–º."
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
    )
    text = response.choices[0].message.content
    await update.message.reply_text(text)

# --- –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def chat(update: Update, context):
    user_text = update.message.text
    prompt = f"–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_text}. –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–∞–∫ –¥—Ä—É–≥ –∑–∞ —Å—Ç–æ–ª–æ–º."
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
    )
    text = response.choices[0].message.content
    await update.message.reply_text(text)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("toast", toast))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

# --- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook_handler(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"status": "ok"}

# --- Healthcheck ---
@app.get("/")
async def root():
    return {"status": "ok"}
