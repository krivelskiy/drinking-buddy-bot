import os
import httpx
import re
import logging
import traceback
import random
from functools import wraps
import time
from collections import defaultdict
from datetime import datetime
from typing import Optional
import asyncio
from datetime import datetime, timedelta

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse
from pydantic import BaseModel

from sqlalchemy import create_engine, text, DDL
from sqlalchemy.engine import Engine

from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters, CommandHandler, CallbackQueryHandler, PreCheckoutQueryHandler

from openai import OpenAI

from config import DATABASE_URL, OPENAI_API_KEY, BOT_TOKEN, RENDER_EXTERNAL_URL
from constants import (
    STICKERS, DRINK_KEYWORDS, DB_FIELDS, FALLBACK_OPENAI_UNAVAILABLE,
    USERS_TABLE, MESSAGES_TABLE, BEER_STICKERS, STICKER_TRIGGERS
)

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
try:
    from .game_functions import detect_game_context, get_game_context_prompt
except ImportError:
    def detect_game_context(recent_messages: list) -> Optional[str]:
        return None
    def get_game_context_prompt(game_name: str) -> str:
        return ""

try:
    from .preference_functions import should_ask_preferences
except ImportError:
    def should_ask_preferences(user_tg_id: int) -> bool:
        return True

# -----------------------------
# –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# -----------------------------

# –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
error_counts = defaultdict(int)
last_error_time = defaultdict(float)

# -----------------------------
# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
# -----------------------------
def load_system_prompt() -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ Context.txt"""
    try:
        with open("Context.txt", "r", encoding="utf-8") as f:
            base_prompt = f.read().strip()
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        return base_prompt + "\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö."
    except Exception as e:
        logger.error(f"Failed to load system prompt: {e}")
        return "–¢—ã ‚Äî –ö–∞—Ç—è –°–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞: –∂–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç—É–µ—à—å, –ª—é–±–∏—à—å –ø–æ—à—É—Ç–∏—Ç—å –∏ –≤—ã–ø–∏—Ç—å. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

SYSTEM_PROMPT = load_system_prompt()

def safe_execute(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except NameError as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            logger.error(f"Undefined function in {func.__name__}: {e}")
            return get_fallback_response(func.__name__)
        except Exception as e:
            error_counts[func.__name__] += 1
            last_error_time[func.__name__] = time.time()
            logger.exception(f"Critical error in {func.__name__}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            await notify_critical_error(func.__name__, str(e))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
            return get_fallback_response(func.__name__)
    return wrapper

def safe_execute_sync(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            error_counts[func.__name__] += 1
            last_error_time[func.__name__] = time.time()
            logger.exception(f"Critical error in {func.__name__}: {e}")
            return get_fallback_response(func.__name__)
    return wrapper

async def notify_critical_error(function_name: str, error: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)"""
    try:
        logger.critical(f"CRITICAL ERROR in {function_name}: {error}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, Telegram, Sentry –∏ —Ç.–¥.
    except Exception:
        pass  # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏

def get_fallback_response(function_name: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –æ—Ç–≤–µ—Ç"""
    fallbacks = {
        "llm_reply": "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ",
        "msg_handler": None,  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        "send_auto_messages": None,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        "ping_scheduler": None,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ping
    }
    return fallbacks.get(function_name, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§î")

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã –ë–î
# -----------------------------
U = DB_FIELDS["users"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å
M = DB_FIELDS["messages"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logger = logging.getLogger("app")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# -----------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# -----------------------------
tapp: Optional[Application] = None

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# -----------------------------
engine: Engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
logger.info("‚úÖ Database engine created")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîß Initializing database...")
    
    with engine.begin() as conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        conn.execute(DDL(f"""
            CREATE TABLE IF NOT EXISTS {USERS_TABLE} (
                id SERIAL PRIMARY KEY,
                user_tg_id BIGINT UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                age INTEGER,
                preferences TEXT,
                last_preference_ask DATE,
                last_holiday_suggest TIMESTAMPTZ,
                last_auto_message TIMESTAMPTZ,
                drink_count INTEGER DEFAULT 0,
                last_drink_report DATE,
                last_stats_reminder TIMESTAMPTZ,
                limit_warning_sent DATE,
                created_at TIMESTAMPTZ DEFAULT NOW()
            )
        """))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS limit_warning_sent DATE"))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã messages
        conn.execute(DDL(f"""
            CREATE TABLE IF NOT EXISTS {MESSAGES_TABLE} (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                user_tg_id BIGINT NOT NULL,
                role TEXT NOT NULL,
                content TEXT NOT NULL,
                created_at TIMESTAMPTZ DEFAULT NOW(),
                reply_to_message_id INTEGER,
                message_id INTEGER,
                sticker_sent TEXT
            )
        """))
        
        # –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–≥–æ
        conn.execute(DDL(f"""
            CREATE TABLE IF NOT EXISTS user_drinks (
                id SERIAL PRIMARY KEY,
                user_tg_id BIGINT NOT NULL,
                chat_id BIGINT NOT NULL,
                drink_type TEXT NOT NULL,
                amount INTEGER NOT NULL,
                unit TEXT NOT NULL,
                drink_time TIMESTAMPTZ DEFAULT NOW(),
                created_at TIMESTAMPTZ DEFAULT NOW()
            )
        """))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ë–î)
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS chat_id BIGINT"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS user_tg_id BIGINT"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS age INTEGER"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS preferences TEXT"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS last_preference_ask DATE"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS last_holiday_suggest TIMESTAMPTZ"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS last_auto_message TIMESTAMPTZ"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS drink_count INTEGER DEFAULT 0"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS last_drink_report DATE"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS last_stats_reminder TIMESTAMPTZ"))
        conn.execute(DDL(f"ALTER TABLE {USERS_TABLE} ADD COLUMN IF NOT EXISTS last_quick_message TIMESTAMPTZ"))
        
        conn.execute(DDL(f"ALTER TABLE {MESSAGES_TABLE} ADD COLUMN IF NOT EXISTS message_id INTEGER"))
        conn.execute(DDL(f"ALTER TABLE {MESSAGES_TABLE} ADD COLUMN IF NOT EXISTS reply_to_message_id INTEGER"))
        conn.execute(DDL(f"ALTER TABLE {MESSAGES_TABLE} ADD COLUMN IF NOT EXISTS sticker_sent TEXT"))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏
        conn.execute(DDL(f"""
            CREATE TABLE IF NOT EXISTS katya_free_drinks (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                drinks_used INTEGER DEFAULT 0,
                date_reset DATE DEFAULT CURRENT_DATE,
                UNIQUE(chat_id, date_reset)
            )
        """))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º timestamps –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –í–ù–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    init_quick_message_timestamps()
    
    logger.info("‚úÖ Database tables created/verified")

def init_quick_message_timestamps():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å timestamps –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        logger.info(" Initializing quick message timestamps...")
        with engine.begin() as conn:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_quick_message = NOW() –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω–æ NULL
            # –Ω–æ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–¥–∞–≤–Ω–æ –æ–±—â–∞–ª–∏—Å—å (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
            result = conn.execute(
                text(f"""
                    UPDATE {USERS_TABLE} 
                    SET last_quick_message = NOW() 
                    WHERE last_quick_message IS NULL
                      AND user_tg_id IN (
                          SELECT DISTINCT user_tg_id 
                          FROM {MESSAGES_TABLE} 
                          WHERE role = 'user' 
                            AND created_at > NOW() - INTERVAL '1 hour'
                      )
                """)
            )
            updated_count = result.rowcount
            logger.info(f"‚úÖ Quick message timestamps initialized for {updated_count} recent users")
    except Exception as e:
        logger.exception(f"Error initializing quick message timestamps: {e}")
        # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–∏

# -----------------------------
# OpenAI –∫–ª–∏–µ–Ω—Ç
# -----------------------------
client: Optional[OpenAI] = None
if OPENAI_API_KEY:
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        logger.info("‚úÖ OpenAI client initialized")
    except Exception as e:
        logger.exception("OpenAI init failed: %s", e)
else:
    logger.warning("OPENAI_API_KEY is empty ‚Äî –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Å –∑–∞–≥–ª—É—à–∫–æ–π")

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏
# -----------------------------

def get_katya_drinks_count(chat_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    with engine.begin() as conn:
        result = conn.execute(text(f"""
            SELECT drinks_used FROM katya_free_drinks 
            WHERE chat_id = :chat_id AND date_reset = CURRENT_DATE
        """), {"chat_id": chat_id}).fetchone()
        
        if result:
            return result[0]
        return 0

def increment_katya_drinks(chat_id: int) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ö–∞—Ç–∏"""
    with engine.begin() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        result = conn.execute(text(f"""
            SELECT id FROM katya_free_drinks 
            WHERE chat_id = :chat_id AND date_reset = CURRENT_DATE
        """), {"chat_id": chat_id}).fetchone()
        
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            conn.execute(text(f"""
                UPDATE katya_free_drinks 
                SET drinks_used = drinks_used + 1 
                WHERE chat_id = :chat_id AND date_reset = CURRENT_DATE
            """), {"chat_id": chat_id})
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            conn.execute(text(f"""
                INSERT INTO katya_free_drinks (chat_id, drinks_used, date_reset) 
                VALUES (:chat_id, 1, CURRENT_DATE)
            """), {"chat_id": chat_id})

def can_katya_drink_free(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –≤—ã–ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–ª–∏–º–∏—Ç 5 –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ –¥–µ–Ω—å)"""
    return get_katya_drinks_count(chat_id) < 5

# -----------------------------
# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
# -----------------------------
def get_today_holidays() -> list[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now()
    month_day = (today.month, today.day)
    
    # –†–µ–∞–ª—å–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    holidays = {
        (1, 1): "–ù–æ–≤—ã–π –≥–æ–¥",
        (1, 7): "–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ", 
        (1, 14): "–°—Ç–∞—Ä—ã–π –ù–æ–≤—ã–π –≥–æ–¥",
        (1, 25): "–î–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞ (–¢–∞—Ç—å—è–Ω–∏–Ω –¥–µ–Ω—å)",
        (2, 14): "–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞",
        (2, 23): "–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞",
        (3, 8): "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å",
        (3, 20): "–î–µ–Ω—å –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Ä–∞–≤–Ω–æ–¥–µ–Ω—Å—Ç–≤–∏—è",
        (4, 1): "–î–µ–Ω—å —Å–º–µ—Ö–∞",
        (4, 12): "–î–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏",
        (4, 22): "–î–µ–Ω—å –ó–µ–º–ª–∏",
        (5, 1): "–î–µ–Ω—å —Ç—Ä—É–¥–∞",
        (5, 9): "–î–µ–Ω—å –ü–æ–±–µ–¥—ã",
        (5, 15): "–î–µ–Ω—å —Å–µ–º—å–∏",
        (5, 24): "–î–µ–Ω—å —Å–ª–∞–≤—è–Ω—Å–∫–æ–π –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç–∏",
        (6, 1): "–î–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π",
        (6, 12): "–î–µ–Ω—å –†–æ—Å—Å–∏–∏",
        (6, 22): "–î–µ–Ω—å –ø–∞–º—è—Ç–∏ –∏ —Å–∫–æ—Ä–±–∏",
        (7, 8): "–î–µ–Ω—å —Å–µ–º—å–∏, –ª—é–±–≤–∏ –∏ –≤–µ—Ä–Ω–æ—Å—Ç–∏",
        (7, 28): "–î–µ–Ω—å –ö—Ä–µ—â–µ–Ω–∏—è –†—É—Å–∏",
        (8, 2): "–î–µ–Ω—å –í–î–í",
        (8, 9): "–î–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è",
        (8, 12): "–î–µ–Ω—å –í–æ–µ–Ω–Ω–æ-–≤–æ–∑–¥—É—à–Ω—ã—Ö —Å–∏–ª",
        (8, 22): "–î–µ–Ω—å –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞",
        (8, 27): "–î–µ–Ω—å –∫–∏–Ω–æ",
        (9, 1): "–î–µ–Ω—å –∑–Ω–∞–Ω–∏–π",
        (9, 5): "–î–µ–Ω—å —É—á–∏—Ç–µ–ª—è",
        (9, 21): "–î–µ–Ω—å –º–∏—Ä–∞",
        (9, 27): "–î–µ–Ω—å –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è",
        (10, 1): "–î–µ–Ω—å –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π",
        (10, 5): "–î–µ–Ω—å —É—á–∏—Ç–µ–ª—è (–≤—Å–µ–º–∏—Ä–Ω—ã–π)",
        (10, 14): "–î–µ–Ω—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏",
        (10, 25): "–î–µ–Ω—å —Ç–∞–º–æ–∂–µ–Ω–Ω–∏–∫–∞",
        (10, 30): "–î–µ–Ω—å –ø–∞–º—è—Ç–∏ –∂–µ—Ä—Ç–≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–ø—Ä–µ—Å—Å–∏–π",
        (11, 4): "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞",
        (11, 7): "–î–µ–Ω—å –û–∫—Ç—è–±—Ä—å—Å–∫–æ–π —Ä–µ–≤–æ–ª—é—Ü–∏–∏",
        (11, 10): "–î–µ–Ω—å –º–∏–ª–∏—Ü–∏–∏",
        (11, 17): "–î–µ–Ω—å —É—á–∞—Å—Ç–∫–æ–≤–æ–≥–æ",
        (11, 21): "–î–µ–Ω—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞",
        (11, 27): "–î–µ–Ω—å –º–∞—Ç–µ—Ä–∏",
        (12, 3): "–î–µ–Ω—å —é—Ä–∏—Å—Ç–∞",
        (12, 10): "–î–µ–Ω—å –ø—Ä–∞–≤ —á–µ–ª–æ–≤–µ–∫–∞",
        (12, 12): "–î–µ–Ω—å –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏",
        (12, 20): "–î–µ–Ω—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –æ—Ä–≥–∞–Ω–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        (12, 22): "–î–µ–Ω—å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞",
        (12, 25): "–†–æ–∂–¥–µ—Å—Ç–≤–æ",
        (12, 31): "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è –Ω–æ—á—å"
    }
    
    today_holidays = []
    if month_day in holidays:
        today_holidays.append(holidays[month_day])
    
    return today_holidays

def should_suggest_holiday(user_tg_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫ (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏)"""
    with engine.begin() as conn:
        row = conn.execute(
            text(f"SELECT last_holiday_suggest FROM {USERS_TABLE} WHERE {U['user_tg_id']} = :tg_id"),
            {"tg_id": user_tg_id},
        ).fetchone()
        
        if not row or not row[0]:
            return True
        
        last_suggest = row[0]
        today = datetime.now().date()
        
        return last_suggest.date() < today

def update_last_holiday_suggest(user_tg_id: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                UPDATE {USERS_TABLE}
                SET last_holiday_suggest = NOW()
                WHERE {U['user_tg_id']} = :tg_id
            """),
            {"tg_id": user_tg_id}
        )

# -----------------------------
# –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
def get_users_for_auto_message() -> list[dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    with engine.begin() as conn:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ –æ–±—â–∞–ª–∏—Å—å –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
        query = f"""
            SELECT DISTINCT u.user_tg_id, u.chat_id, u.first_name, u.preferences
            FROM {USERS_TABLE} u
            LEFT JOIN (
                SELECT user_tg_id, MAX(created_at) as last_message_time
                FROM {MESSAGES_TABLE}
                GROUP BY user_tg_id
            ) m ON u.user_tg_id = m.user_tg_id
            WHERE m.last_message_time IS NOT NULL
              AND m.last_message_time < NOW() - INTERVAL '24 hours'
              AND (u.last_auto_message IS NULL 
                   OR u.last_auto_message < NOW() - INTERVAL '24 hours')
        """
        
        rows = conn.execute(text(query)).fetchall()
        return [
            {
                "user_tg_id": row[0],
                "chat_id": row[1], 
                "first_name": row[2],
                "preferences": row[3]
            }
            for row in rows
        ]

def generate_auto_message(first_name: str, preferences: Optional[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–∞–Ω—á–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    messages = [
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –°–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ –Ω–∞—à–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º üòä –î–∞–≤–∞–π –≤—ã–ø—å–µ–º –∏ –ø–æ–±–æ–ª—Ç–∞–µ–º?",
        f"–≠–π, {first_name}! –£ –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è - –¥–∞–≤–∞–π –æ—Ç–º–µ—Ç–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å! üçª",
        f"{first_name}, —è —Ç—É—Ç –¥—É–º–∞—é... –∞ –Ω–µ –≤—ã–ø–∏—Ç—å –ª–∏ –Ω–∞–º? üòâ",
        f"–ü—Ä–∏–≤–µ—Ç! –°–∫—É—á–∞—é –ø–æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, {first_name}! –î–∞–≤–∞–π –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞ —Ä—é–º–æ—á–∫–æ–π?",
        f"–≠–π, {first_name}! –£ –º–µ–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—à—å—Å—è? ü•Ç",
        f"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —É—Å—Ç—Ä–æ–∏–º –≤–µ—á–µ—Ä–∏–Ω–∫—É –Ω–∞ –¥–≤–æ–∏—Ö, {first_name}! üéâ",
        f"{first_name}, —è —Ç—É—Ç –æ–¥–Ω–∞ —Å–∏–∂—É... –Ω–µ —Å–æ—Å–∫—É—á–∏—à—å—Å—è –ª–∏ –ø–æ –º–Ω–µ? üòò",
        f"–≠–π! –£ –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π, {first_name}? üç∑",
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –î–∞–≤–∞–π –æ—Ç–º–µ—Ç–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–µ–µ! ü•É",
        f"{first_name}, —è —Ç—É—Ç –¥—É–º–∞—é –æ —Ç–µ–±–µ... –∞ –Ω–µ –≤—ã–ø–∏—Ç—å –ª–∏ –Ω–∞–º –≤–º–µ—Å—Ç–µ? üòä"
    ]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if preferences:
        pref_messages = [
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–≤–æ–µ –ª—é–±–∏–º–æ–µ {preferences}! –î–∞–≤–∞–π –≤—ã–ø—å–µ–º? üçª",
            f"–≠–π, {first_name}! –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ {preferences} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è! üòò",
            f"{first_name}, –ø–æ–º–Ω–∏—à—å –∫–∞–∫ —Ç—ã –ª—é–±–∏—à—å {preferences}? –î–∞–≤–∞–π –æ—Ç–º–µ—Ç–∏–º! ü•Ç",
            f"–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å {preferences} - —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—à—å—Å—è? ü•Ç"
        ]
        messages.extend(pref_messages)
    
    import random
    return random.choice(messages)

def update_last_auto_message(user_tg_id: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                UPDATE {USERS_TABLE}
                SET last_auto_message = NOW()
                WHERE {U['user_tg_id']} = :tg_id
            """),
            {"tg_id": user_tg_id}
        )

async def send_auto_messages():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        users = get_users_for_auto_message()
        logger.info(f"Found {len(users)} users for auto messages")
        
        for user in users:
            try:
                message = generate_auto_message(user["first_name"] or "–¥—Ä—É–≥", user["preferences"])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                        json={
                            "chat_id": user["chat_id"],
                            "text": message
                        }
                    )
                    
                    if response.status_code == 200:
                        logger.info(f"Auto message sent to user {user['user_tg_id']}: {message[:50]}...")
                        update_last_auto_message(user["user_tg_id"])
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                        save_message(user["chat_id"], user["user_tg_id"], "assistant", message, None)
                    else:
                        logger.warning(f"Failed to send auto message to user {user['user_tg_id']}: {response.text}")
                        
            except Exception as e:
                logger.exception(f"Error sending auto message to user {user['user_tg_id']}: {e}")
                
    except Exception as e:
        logger.exception(f"Error in send_auto_messages: {e}")

async def auto_message_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"""
    while True:
        try:
            await send_auto_messages()
            await asyncio.sleep(2 * 60 * 60)  # 2 —á–∞—Å–∞
        except Exception as e:
            logger.exception(f"Error in auto_message_scheduler: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

# -----------------------------
# Telegram Application
# -----------------------------
if not BOT_TOKEN:
    logger.error("BOT_TOKEN is empty (webhook/–±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç)")

async def ping_scheduler():
    """Ping-–±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render"""
    while True:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            
            # –õ–æ–≥–∏—Ä—É–µ–º ping
            logger.info("üîÑ Ping: keeping app alive")
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ
            async with httpx.AsyncClient() as client:
                try:
                    response = await client.get("https://drinking-buddy-bot.onrender.com/")
                    logger.info(f"‚úÖ Self-ping successful: {response.status_code}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Self-ping failed: {e}")
                    
        except Exception as e:
            logger.exception(f"‚ùå Ping scheduler error: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

def build_application() -> Application:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is not set")
    app_ = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app_.add_handler(CommandHandler("gift", gift_command))
    app_.add_handler(CallbackQueryHandler(gift_callback, pattern="^(gift_|gift_menu)"))
    app_.add_handler(PreCheckoutQueryHandler(pre_checkout_query))
    app_.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app_.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, msg_handler))
    
    return app_

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã –ë–î
# -----------------------------
U = DB_FIELDS["users"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å
M = DB_FIELDS["messages"]  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å

def upsert_user_from_update(update: Update) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Update"""
    if not update.message or not update.message.from_user:
        return

    tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    last_name = update.message.from_user.last_name

    with engine.begin() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ PRIMARY KEY (tg_id)
        existing = conn.execute(
            text(f"SELECT tg_id FROM {USERS_TABLE} WHERE tg_id = :tg_id"),
            {"tg_id": tg_id},
        ).fetchone()

        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute(
                text(f"""
                    UPDATE {USERS_TABLE}
                    SET {U['username']} = :username, {U['first_name']} = :first_name, {U['last_name']} = :last_name, {U['chat_id']} = :chat_id, {U['user_tg_id']} = :tg_id
                    WHERE tg_id = :tg_id
                """),
                {
                    "tg_id": tg_id,
                    "chat_id": chat_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                },
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute(
                text(f"""
                    INSERT INTO {USERS_TABLE} ({U['user_tg_id']}, {U['chat_id']}, {U['username']}, {U['first_name']}, {U['last_name']}, tg_id)
                    VALUES (:tg_id, :chat_id, :username, :first_name, :last_name, :tg_id)
                """),
                {
                    "tg_id": tg_id,
                    "chat_id": chat_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                },
            )

def save_message(chat_id: int, user_tg_id: int, role: str, content: str, message_id: Optional[int] = None, reply_to_message_id: Optional[int] = None, sticker_sent: Optional[str] = None) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                INSERT INTO {MESSAGES_TABLE} ({M['chat_id']}, {M['user_tg_id']}, {M['role']}, {M['content']}, {M['message_id']}, {M['reply_to_message_id']}, sticker_sent)
                VALUES (:chat_id, :user_tg_id, :role, :content, :message_id, :reply_to_message_id, :sticker_sent)
            """),
            {
                "chat_id": chat_id,
                "user_tg_id": user_tg_id,
                "role": role,
                "content": content,
                "message_id": message_id,
                "reply_to_message_id": reply_to_message_id,
                "sticker_sent": sticker_sent,
            },
        )

def get_user_age(user_tg_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    with engine.begin() as conn:
        row = conn.execute(
            text(f"SELECT {U['age']} FROM {USERS_TABLE} WHERE {U['user_tg_id']} = :tg_id"),
            {"tg_id": user_tg_id},
        ).fetchone()
        age = row[0] if row and row[0] else None
        logger.info(f"Retrieved age for user {user_tg_id}: {age}")
        return age

def get_user_name(user_tg_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    with engine.begin() as conn:
        row = conn.execute(
            text(f"SELECT {U['first_name']} FROM {USERS_TABLE} WHERE {U['user_tg_id']} = :tg_id"),
            {"tg_id": user_tg_id},
        ).fetchone()
        name = row[0] if row and row[0] else None
        logger.info(f"Retrieved name for user {user_tg_id}: {name}")
        return name

def update_user_age(user_tg_id: int, age: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                UPDATE {USERS_TABLE}
                SET {U['age']} = :age
                WHERE {U['user_tg_id']} = :tg_id
            """),
            {"tg_id": user_tg_id, "age": age},
        )
        logger.info(f"Updated age for user {user_tg_id} to {age}")

def parse_age_from_text(text: str) -> Optional[int]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        patterns = [
            r'–º–Ω–µ\s+(\d+)\s+–ª–µ—Ç',
            r'–º–Ω–µ\s+(\d+)',
            r'(\d+)\s+–ª–µ—Ç',
        ]
        
        text_lower = text.lower()
        for pattern in patterns:
            match = re.search(pattern, text_lower)
            if match:
                age = int(match.group(1))
                if 1 <= age <= 120:
                    return age
        return None
    except Exception as e:
        logger.error(f"Error parsing age: {e}")
        return None

def get_recent_messages(chat_id: int, limit: int = 12) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    with engine.begin() as conn:
        rows = conn.execute(
            text(f"""
                SELECT {M['role']}, {M['content']} 
                FROM {MESSAGES_TABLE} 
                WHERE {M['chat_id']} = :chat_id 
                ORDER BY {M['created_at']} DESC 
                LIMIT :limit
            """),
            {"chat_id": chat_id, "limit": limit},
        ).fetchall()
        return [{"role": row[0], "content": row[1]} for row in rows]

def get_user_facts(user_tg_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    facts = []
    
    # –í–æ–∑—Ä–∞—Å—Ç
    age = get_user_age(user_tg_id)
    if age:
        facts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç")
    
    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    preferences = get_user_preferences(user_tg_id)
    if preferences:
        facts.append(f"–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {preferences}")
    
    # –ò–º—è
    name = get_user_name(user_tg_id)
    if name:
        facts.append(f"–ò–º—è: {name}")
    
    # –£–ë–ò–†–ê–ï–ú —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–∏—Ç–æ–≥–æ –∏–∑ —Ñ–∞–∫—Ç–æ–≤ - –æ–Ω–∞ –º–µ—à–∞–µ—Ç LLM
    # daily_drinks = get_daily_drinks(user_tg_id)
    # if daily_drinks:
    #     daily_total = sum(drink['amount'] for drink in daily_drinks)
    #     facts.append(f"–í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {daily_total} –ø–æ—Ä—Ü–∏–π")
    
    return ", ".join(facts) if facts else ""

def build_conversation_context(recent_messages: list, user_text: str) -> list:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å —É–º–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º"""
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–æ–æ–±—â–µ–Ω–∏–π (6 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç) - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
    context_messages = recent_messages[-12:] if len(recent_messages) > 12 else recent_messages
    
    # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    context_messages.reverse()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    filtered_messages = []
    for msg in context_messages:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç)
        if len(msg["content"].strip()) < 2:
            continue
        filtered_messages.append(msg)
    
    return filtered_messages

@safe_execute
async def llm_reply(user_text: str, username: Optional[str], user_tg_id: int, chat_id: int) -> tuple[str, Optional[str]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç LLM —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not validate_user_input(user_text):
        logger.warning(f"Invalid user input from {user_tg_id}")
        return "–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É! üòÖ", None
    
    if not validate_user_id(user_tg_id) or not validate_chat_id(chat_id):
        logger.warning(f"Invalid user_id or chat_id: {user_tg_id}, {chat_id}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòÖ", None
    
    if client is None:
        return FALLBACK_OPENAI_UNAVAILABLE, None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_age = get_user_age(user_tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç)
        recent_messages = get_recent_messages(chat_id, limit=12)
        
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_preferences = get_user_preferences(user_tg_id)
        logger.info(f"Retrieved preferences for user {user_tg_id}: {user_preferences}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        should_ask_prefs = should_ask_preferences(user_tg_id)
        logger.info(f"Should ask preferences for user {user_tg_id}: {should_ask_prefs}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_facts = get_user_facts(user_tg_id)
        if user_facts:
            messages.append({"role": "system", "content": f"–í–ê–ñ–ù–´–ï –§–ê–ö–¢–´ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï: {user_facts}. –í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏ —ç—Ç–∏ —Ñ–∞–∫—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ."})
            logger.info(f"Added user facts: {user_facts}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        if user_preferences:
            messages.append({"role": "system", "content": f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö: {user_preferences}. –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."})
            logger.info(f"Added preferences to LLM prompt: {user_preferences}")
        elif should_ask_prefs:
            messages.append({"role": "system", "content": "–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —ç—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ."})
            logger.info(f"Added preference question prompt to LLM")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            update_last_preference_ask(user_tg_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        active_game = detect_game_context(recent_messages)
        if active_game:
            game_prompt = get_game_context_prompt(active_game)
            messages.append({"role": "system", "content": game_prompt})
            logger.info(f"Added game context: {active_game}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        today_holidays = get_today_holidays()
        if today_holidays and should_suggest_holiday(user_tg_id):
            holiday_text = ", ".join(today_holidays)
            messages.append({"role": "system", "content": f"–°–ï–ì–û–î–ù–Ø –ü–†–ê–ó–î–ù–ò–ö: {holiday_text}! –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–ø–∏—Ç—å –≤ —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è."})
            logger.info(f"Added holiday context: {holiday_text}")
            update_last_holiday_suggest(user_tg_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!)
        conversation_context = build_conversation_context(recent_messages, user_text)
        for msg in conversation_context:
            messages.append(msg)
        
        messages.append({"role": "user", "content": user_text})
        
        logger.info(f"LLM request for user {user_tg_id}: {len(messages)} messages, context: {len(conversation_context)} messages")

        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.3,  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ –ø–æ—Å–ª—É—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            max_tokens=250,
        )
        
        response_text = resp.choices[0].message.content.strip()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"LLM raw response for user {user_tg_id}: '{response_text}'")
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ò–ö–ï–†–ê –ü–û –ö–û–ù–¢–ï–ö–°–¢–£
        sticker_command = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        response_lower = response_text.lower()
        
        # –°—Ç–∏–∫–µ—Ä—ã –∞–ª–∫–æ–≥–æ–ª—è
        if any(keyword in response_lower for keyword in ["üç∫", "–ø–∏–≤–æ", "beer", "–ø–µ–π", "–≤—ã–ø–µ–π", "–Ω–∞–ª–∏–≤–∞–π"]):
            sticker_command = "[SEND_DRINK_BEER]"
        elif any(keyword in response_lower for keyword in ["üç∑", "–≤–∏–Ω–æ", "wine", "–≤–∏–Ω—Ü–∞", "–≤–∏–Ω—Ü–æ"]):
            sticker_command = "[SEND_DRINK_WINE]"
        elif any(keyword in response_lower for keyword in ["üç∏", "–≤–æ–¥–∫–∞", "vodka", "–≤–æ–¥–æ—á–∫–∞"]):
            sticker_command = "[SEND_DRINK_VODKA]"
        elif any(keyword in response_lower for keyword in ["ü•É", "–≤–∏—Å–∫–∏", "whisky", "–≤–∏—Å–∫–∞—Ä—å"]):
            sticker_command = "[SEND_DRINK_WHISKY]"
        elif any(keyword in response_lower for keyword in ["üçæ", "—à–∞–º–ø–∞–Ω—Å–∫–æ–µ", "champagne"]):
            sticker_command = "[SEND_DRINK_CHAMPAGNE]"
        
        # –°—Ç–∏–∫–µ—Ä—ã –ö–∞—Ç–∏
        elif any(keyword in response_lower for keyword in ["üòò", "üíã", "—Ü–µ–ª—É—é", "–ø–æ—Ü–µ–ª—É–π"]):
            sticker_command = "[SEND_KATYA_KISS]"
        elif any(keyword in response_lower for keyword in ["üòÑ", "üòÇ", "—Å–º–µ—é—Å—å", "–≤–µ—Å–µ–ª–æ"]):
            sticker_command = "[SEND_KATYA_LAUGH]"
        elif any(keyword in response_lower for keyword in ["üòä", "—Ä–∞–¥–∞", "—Å—á–∞—Å—Ç–ª–∏–≤–∞", "—É–ª—ã–±–∫–∞"]):
            sticker_command = "[SEND_KATYA_HAPPY]"
        
        if sticker_command:
            logger.info(f"Auto-detected sticker: {sticker_command} for user {user_tg_id}")
        
        return response_text, sticker_command
        
    except Exception as e:
        logger.exception(f"LLM error for user {user_tg_id}: {e}")
        return "–£ –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ", None

async def send_sticker_by_command(chat_id: int, sticker_command: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç LLM"""
    sticker_map = {
        "[SEND_DRINK_VODKA]": STICKERS["DRINK_VODKA"],
        "[SEND_DRINK_WHISKY]": STICKERS["DRINK_WHISKY"], 
        "[SEND_DRINK_WINE]": STICKERS["DRINK_WINE"],
        "[SEND_DRINK_BEER]": STICKERS["DRINK_BEER"],
        "[SEND_KATYA_HAPPY]": STICKERS["KATYA_HAPPY"],
        "[SEND_KATYA_SAD]": STICKERS["KATYA_SAD"],
    }
    
    sticker_id = sticker_map.get(sticker_command)
    if not sticker_id:
        logger.warning(f"Unknown sticker command: {sticker_command}")
        return
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendSticker",
                json={
                    "chat_id": chat_id,
                    "sticker": sticker_id,
                },
            )
            response.raise_for_status()
            logger.info(f"Sent sticker {sticker_command} to chat {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ—Å–ª–µ –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
            if sticker_command.startswith("[SEND_DRINK_"):
                logger.info(f"Alcohol sticker sent, checking gift request for chat {chat_id}")
                # –ü–æ–ª—É—á–∞–µ–º user_tg_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                user_tg_id = get_last_user_tg_id(chat_id)
                logger.info(f"Last user_tg_id for chat {chat_id}: {user_tg_id}")
                
                if user_tg_id:
                    alcohol_count = get_alcohol_sticker_count(user_tg_id)
                    logger.info(f"Alcohol sticker count for user {user_tg_id}: {alcohol_count}")
                    
                    if should_ask_for_gift(user_tg_id):
                        logger.info(f"Should ask for gift! Sending request to chat {chat_id}")
                        await send_gift_request(chat_id, user_tg_id)
                    else:
                        logger.info(f"Not time to ask for gift yet for user {user_tg_id}")
                else:
                    logger.warning(f"No user_tg_id found for chat {chat_id}")
                    
        except Exception as e:
            logger.exception(f"Failed to send sticker {sticker_command}: {e}")

async def gift_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gift - –ø–æ–∫—É–ø–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è –∑–∞ –∑–≤–µ–∑–¥—ã"""
    if not update.message:
        return
    
    chat_id = update.message.chat_id
    user_tg_id = update.message.from_user.id
    
    logger.info(f"Gift command received from user {user_tg_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [
            InlineKeyboardButton("üç∑ –í–∏–Ω–æ (250 ‚≠ê)", callback_data="gift_wine"),
            InlineKeyboardButton("üç∏ –í–æ–¥–∫–∞ (100 ‚≠ê)", callback_data="gift_vodka")
        ],
        [
            InlineKeyboardButton("ü•É –í–∏—Å–∫–∏ (500 ‚≠ê)", callback_data="gift_whisky"),
            InlineKeyboardButton("üç∫ –ü–∏–≤–æ (50 ‚≠ê)", callback_data="gift_beer")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéÅ –í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ö–∞—Ç–∏:\n\n"
        "–ö–∞—Ç—è –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫! üíï",
        reply_markup=reply_markup
    )

async def gift_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    logger.info(f"Gift callback from user {user_id}: {data}")
    
    if data == "gift_menu":
        await show_gift_menu(query)
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö
    drink_info = {
        "gift_wine": {"name": "üç∑ –í–∏–Ω–æ", "stars": 250, "sticker": "[SEND_DRINK_WINE]"},
        "gift_vodka": {"name": "üç∏ –í–æ–¥–∫–∞", "stars": 100, "sticker": "[SEND_DRINK_VODKA]"},
        "gift_whisky": {"name": "ü•É –í–∏—Å–∫–∏", "stars": 500, "sticker": "[SEND_DRINK_WHISKY]"},
        "gift_beer": {"name": "üç∫ –ü–∏–≤–æ", "stars": 50, "sticker": "[SEND_DRINK_BEER]"}
    }
    
    if data not in drink_info:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫")
        return
    
    drink = drink_info[data]
    
    # –°–æ–∑–¥–∞–µ–º –ü–õ–ê–¢–ï–ñ–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ send_invoice
    from telegram import LabeledPrice
    
    try:
        await query.message.reply_invoice(
            title=f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ö–∞—Ç–∏: {drink['name']}",
            description=f"–ö–∞—Ç—è –±—É–¥–µ—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞! üíï",
            payload=f"gift_{data}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
            currency="XTR",  # Telegram Stars
            prices=[LabeledPrice(f"{drink['name']}", drink['stars'])],
            start_parameter=f"gift_{data}",
            photo_url="https://via.placeholder.com/300x200/FF6B6B/FFFFFF?text=üéÅ+Gift+for+Katya",
            photo_width=300,
            photo_height=200
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            await query.message.delete()
        except Exception as e:
            logger.exception(f"Failed to delete old message: {e}")
            
    except Exception as e:
        logger.exception(f"Failed to send invoice: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def show_gift_menu(query) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [
            InlineKeyboardButton("üç∑ –í–∏–Ω–æ (250 ‚≠ê)", callback_data="gift_wine"),
            InlineKeyboardButton("üç∏ –í–æ–¥–∫–∞ (100 ‚≠ê)", callback_data="gift_vodka")
        ],
        [
            InlineKeyboardButton("ü•É –í–∏—Å–∫–∏ (500 ‚≠ê)", callback_data="gift_whisky"),
            InlineKeyboardButton("üç∫ –ü–∏–≤–æ (50 ‚≠ê)", callback_data="gift_beer")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéÅ –í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –ö–∞—Ç–∏:\n\n"
        "–ö–∞—Ç—è –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫! üíï",
        reply_markup=reply_markup
    )

async def pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.pre_checkout_query
    if not query:
        return
    
    logger.info(f"Pre-checkout query: {query.invoice_payload}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    if not update.message or not update.message.successful_payment:
        return
    
    payment = update.message.successful_payment
    user_tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    logger.info(f"Successful payment from user {user_tg_id}: {payment.invoice_payload}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –±—ã–ª –∫—É–ø–ª–µ–Ω
    drink_info = {
        "wine": {"name": "üç∑ –í–∏–Ω–æ", "sticker": "[SEND_DRINK_WINE]", "emoji": "üç∑"},
        "vodka": {"name": "üç∏ –í–æ–¥–∫–∞", "sticker": "[SEND_DRINK_VODKA]", "emoji": "üç∏"},
        "whisky": {"name": "ü•É –í–∏—Å–∫–∏", "sticker": "[SEND_DRINK_WHISKY]", "emoji": "ü•É"},
        "beer": {"name": "üç∫ –ü–∏–≤–æ", "sticker": "[SEND_DRINK_BEER]", "emoji": "üç∫"}
    }
    
    drink_type = payment.invoice_payload
    if drink_type not in drink_info:
        drink_type = "wine"  # fallback
    
    drink = drink_info[drink_type]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–∫—Ä–µ–Ω–Ω—é—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    gratitude_messages = [
        f"üéâ –û–≥–æ! –¢—ã –ø–æ–¥–∞—Ä–∏–ª –º–Ω–µ {drink['name']}!",
        f"üíï –Ø —Ç–∞–∫ —Ä–∞–¥–∞! –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ!",
        f" –¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π! –°–µ–π—á–∞—Å –≤—ã–ø—å—é —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!",
        f"{drink['emoji']} *–≤—ã–ø–∏–≤–∞–µ—Ç* –ú–º–º, –∫–∞–∫ –≤–∫—É—Å–Ω–æ!",
        f"üíñ –¢—ã —Å–¥–µ–ª–∞–ª –º–æ–π –¥–µ–Ω—å! –û–±–Ω–∏–º–∞—é —Ç–µ–±—è! ü§ó"
    ]
    
    for i, message in enumerate(gratitude_messages):
        try:
            await update.message.reply_text(message)
            if i == 0:  # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                await send_sticker_by_command(chat_id, drink['sticker'])
        except Exception as e:
            logger.exception(f"Failed to send gratitude message {i}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    try:
        for message in gratitude_messages:
            save_message(chat_id, user_tg_id, "assistant", message)
    except Exception as e:
        logger.exception(f"Failed to save gratitude messages: {e}")

# -----------------------------
# –•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
@safe_execute
async def msg_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
    
    text_in = update.message.text
    user_tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    logger.info(f"Received message: {text_in} from user {user_tg_id}")
    
    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–ï–†–í–û–ô!
    if any(word in text_in.lower() for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å–∫–æ–ª—å–∫–æ –≤—ã–ø–∏–ª', '—Å–∫–æ–ª—å–∫–æ –ø–∏–ª', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫']):
        stats = generate_drinks_stats(user_tg_id)
        await update.message.reply_text(f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ:**\n\n{stats}")
        save_message(chat_id, user_tg_id, "assistant", f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ:**\n\n{stats}", None, None, None)
        return  # –í–ê–ñ–ù–û: return —á—Ç–æ–±—ã –ù–ï –≤—ã–∑—ã–≤–∞—Ç—å LLM
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...
    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age = parse_age_from_text(text_in)
    if age:
        try:
            update_user_age(user_tg_id, age)
            logger.info("Updated user age to %d", age)
        except Exception:
            logger.exception("Failed to update age")
    
    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö
    preferences = parse_drink_preferences(text_in)
    if preferences:
        try:
            update_user_preferences(user_tg_id, preferences)
            logger.info("Updated user preferences to %s", preferences)
        except Exception:
            logger.exception("Failed to update preferences")
    
    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–≥–æ
    drink_info = parse_drink_info(text_in)
    if drink_info:
        try:
            save_drink_record(user_tg_id, chat_id, drink_info)
            logger.info("‚úÖ Saved drink record: %s", drink_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            is_over_limit, total_amount = check_daily_limit(user_tg_id)
            if is_over_limit:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                user_name = get_user_name(user_tg_id) or "–¥—Ä—É–≥"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ë–ï–ó –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                warning_prompt = f"""–¢—ã ‚Äî –ö–∞—Ç—è –°–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–∂–µ –≤—ã–ø–∏–ª {total_amount} –ø–æ—Ä—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è. 
–ù—É–∂–Ω–æ –º—è–≥–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –µ–≥–æ –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –º–Ω–æ–≥–æ, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤. 
–í–ê–ñ–ù–û: –ù–ï –≥–æ–≤–æ—Ä–∏ "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è - —ç—Ç–æ —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–∞!
–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–æ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π."""

                try:
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[{"role": "user", "content": warning_prompt}],
                        max_tokens=100,
                        temperature=0.7
                    )
                    warning_msg = response.choices[0].message.content.strip()
                except Exception:
                    # Fallback –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    warning_msg = f"‚ö†Ô∏è {user_name}, —Ç—ã —É–∂–µ –≤—ã–ø–∏–ª {total_amount} –ø–æ—Ä—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è! –ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤? üçª"
                
                await update.message.reply_text(warning_msg)
                save_message(chat_id, user_tg_id, "assistant", warning_msg, None, None, None)
                mark_limit_warning_sent(user_tg_id)  # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                return  # –í–ê–ñ–ù–û: return —á—Ç–æ–±—ã –ù–ï –≤—ã–∑—ã–≤–∞—Ç—å LLM –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            
        except Exception:
            logger.exception("Failed to save drink record")
    
    # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    if should_remind_about_stats(user_tg_id):
        reminder_msg = "üí° –ö—Å—Ç–∞—Ç–∏, —è –º–æ–≥—É –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–µ–≥–æ –≤—ã–ø–∏—Ç–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –∏ —è –ø–æ–∫–∞–∂—É —Å–∫–æ–ª—å–∫–æ —Ç—ã –≤—ã–ø–∏–ª —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞ –Ω–µ–¥–µ–ª—é! üìä\n\n–ê —á—Ç–æ–±—ã —è –Ω–µ –∑–∞–±—ã–≤–∞–ª–∞ - –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –ø—å–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: \"–≤—ã–ø–∏–ª 2 –ø–∏–≤–∞\" –∏–ª–∏ \"–≤—ã–ø–∏–ª 100–≥ –≤–æ–¥–∫–∏\" üç∑"
        await update.message.reply_text(reminder_msg)
        save_message(chat_id, user_tg_id, "assistant", reminder_msg, None, None, None)
        update_stats_reminder(user_tg_id)
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...

    # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–∏—Ç–æ–≥–æ
    drink_amount = parse_drink_amount(text_in)
    if drink_amount:
        try:
            update_user_drink_count(user_tg_id, drink_amount)
            logger.info("Updated user drink count by %d", drink_amount)
        except Exception:
            logger.exception("Failed to update drink count")

    # 5) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
    recent_messages = get_recent_messages(chat_id, limit=12)
    answer = llm_reply(text_in, user_tg_id, chat_id, recent_messages)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
    sticker_command = None
    if any(keyword in answer.lower() for keyword in ["–≤—ã–ø—å–µ–º", "–≤—ã–ø—å–µ–º—Ç–µ", "–ø—å–µ–º", "–ø—å–µ–º—Ç–µ", "–≤—ã–ø—å–µ–º –≤–º–µ—Å—Ç–µ", "–¥–∞–≤–∞–π –≤—ã–ø—å–µ–º"]):
        sticker_command = "[SEND_DRINK_BEER]"
    elif any(keyword in answer.lower() for keyword in ["–≤–æ–¥–∫–∞", "–≤–æ–¥–æ—á–∫–∞", "–≤–æ–¥–æ—á–∫–∏"]):
        sticker_command = "[SEND_DRINK_VODKA]"
    elif any(keyword in answer.lower() for keyword in ["–≤–∏–Ω–æ", "–≤–∏–Ω—Ü–æ", "–≤–∏–Ω—Ü–∞"]):
        sticker_command = "[SEND_DRINK_WINE]"
    elif any(keyword in answer.lower() for keyword in ["–≤–∏—Å–∫–∏", "–≤–∏—Å–∫–∞—Ä—å", "–≤–∏—Å–∫–∞—Ä—è"]):
        sticker_command = "[SEND_DRINK_WHISKEY]"
    elif any(keyword in answer.lower() for keyword in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "—Ç–æ—Å–∫–ª–∏–≤–æ", "–≥—Ä—É—Å—Ç–Ω–∞—è"]):
        sticker_command = "[SEND_SAD_STICKER]"
    elif any(keyword in answer.lower() for keyword in ["—Ä–∞–¥–æ—Å—Ç–Ω–æ", "–≤–µ—Å–µ–ª–æ", "—Å—á–∞—Å—Ç–ª–∏–≤–æ", "—Ä–∞–¥–æ—Å—Ç–Ω–∞—è"]):
        sticker_command = "[SEND_HAPPY_STICKER]"

    # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        sent_message = await update.message.reply_text(answer)
        
        # 7) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä (–µ—Å–ª–∏ LLM –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª)
        if sticker_command:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            if can_katya_drink_free(chat_id):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                await send_sticker_by_command(chat_id, sticker_command)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                increment_katya_drinks(chat_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –° –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä–µ
                save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id, None, sticker_command)
            else:
                # –ö–∞—Ç—è –∏—Å—á–µ—Ä–ø–∞–ª–∞ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                await send_gift_request(chat_id, user_tg_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –ë–ï–ó —Å—Ç–∏–∫–µ—Ä–∞
                save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –±–µ–∑ —Å—Ç–∏–∫–µ—Ä–∞
            save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id)
    except Exception as e:
        logger.exception(f"Message handler error: {e}")
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§î")
        except Exception:
            pass  # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ

def get_alcohol_sticker_count(user_tg_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with engine.begin() as conn:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–º–∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        result = conn.execute(
            text(f"""
                SELECT COUNT(*) FROM {MESSAGES_TABLE} 
                WHERE {M['user_tg_id']} = :user_tg_id 
                AND {M['role']} = 'assistant'
                AND sticker_sent LIKE '[SEND_DRINK_%'
                AND {M['created_at']} > NOW() - INTERVAL '24 hours'
            """),
            {"user_tg_id": user_tg_id}
        ).fetchone()
        return result[0] if result else 0

def should_ask_for_gift(user_tg_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–∫–∞–∂–¥—ã–µ 3 —Å—Ç–∏–∫–µ—Ä–∞ –∞–ª–∫–æ–≥–æ–ª—è)"""
    count = get_alcohol_sticker_count(user_tg_id)
    should_ask = count > 0 and count % 3 == 0
    logger.info(f"Checking gift request for user {user_tg_id}: count={count}, should_ask={should_ask}")
    return should_ask

async def send_gift_request(chat_id: int, user_tg_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –∫–æ–≥–¥–∞ —É –ö–∞—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"""
    messages = [
        "–Ø –±—ã —Ö–æ—Ç–µ–ª–∞ —Å —Ç–æ–±–æ–π –≤—ã–ø–∏—Ç—å, –Ω–æ —É –º–µ–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–∞–ø–∏—Ç–∫–∏ üòî",
        "–ú–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤—ã–ø–∏—Ç—å? üç∑"
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —á–µ—Ä–µ–∑ Telegram API
    async with httpx.AsyncClient() as client:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º InlineKeyboardMarkup –≤ —Å–ª–æ–≤–∞—Ä—å
            keyboard_dict = {
                "inline_keyboard": [
                    [{"text": "üéÅ –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ö–∞—Ç–µ", "callback_data": "gift_menu"}]
                ]
            }
            
            response = await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": "\n".join(messages),
                    "reply_markup": keyboard_dict
                }
            )
            response.raise_for_status()
            logger.info(f"Sent gift request to chat {chat_id}")
        except Exception as e:
            logger.exception(f"Failed to send gift request: {e}")

def get_last_user_tg_id(chat_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ user_tg_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
    with engine.begin() as conn:
        result = conn.execute(
            text(f"""
                SELECT {M['user_tg_id']} FROM {MESSAGES_TABLE} 
                WHERE {M['chat_id']} = :chat_id 
                ORDER BY {M['created_at']} DESC 
                LIMIT 1
            """),
            {"chat_id": chat_id}
        ).fetchone()
        return result[0] if result else None

def get_user_preferences(user_tg_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with engine.begin() as conn:
        row = conn.execute(
            text(f"SELECT preferences FROM {USERS_TABLE} WHERE {U['user_tg_id']} = :tg_id"),
            {"tg_id": user_tg_id},
        ).fetchone()
        return row[0] if row and row[0] else None

def update_user_preferences(user_tg_id: int, preferences: str) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                UPDATE {USERS_TABLE}
                SET {U['preferences']} = :preferences
                WHERE {U['user_tg_id']} = :tg_id
            """),
            {"tg_id": user_tg_id, "preferences": preferences},
        )
        logger.info(f"Updated preferences for user {user_tg_id} to {preferences}")

def should_ask_preferences(user_tg_id: int) -> bool:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    try:
        # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        return True  # –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å
    except Exception as e:
        logger.error(f"Error checking preferences: {e}")
        return False

def update_last_preference_ask(user_tg_id: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö"""
    with engine.begin() as conn:
        conn.execute(
            text(f"""
                UPDATE {USERS_TABLE}
                SET {U['last_preference_ask']} = CURRENT_DATE
                WHERE {U['user_tg_id']} = :tg_id
            """),
            {"tg_id": user_tg_id},
        )
        logger.info(f"Updated last preference ask date for user {user_tg_id}")

def detect_game_context(recent_messages: list) -> Optional[str]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        return None  # –ù–∏–∫–∞–∫–∏—Ö –∏–≥—Ä
    except Exception as e:
        logger.error(f"Error detecting game context: {e}")
        return None

def get_game_context_prompt(game_name: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"""
    game_prompts = {
        "20 –≤–æ–ø—Ä–æ—Å–æ–≤": "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ–º –≤ '20 –≤–æ–ø—Ä–æ—Å–æ–≤'! –ó–∞–≥–∞–¥–∞–π —á—Ç–æ-—Ç–æ, –∞ —è –±—É–¥—É —É–≥–∞–¥—ã–≤–∞—Ç—å, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",
        "–ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ": "–ò–≥—Ä–∞–µ–º –≤ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ'! –í—ã–±–∏—Ä–∞–π: –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ?",
        "–∫—Ä–æ–∫–æ–¥–∏–ª": "–ò–≥—Ä–∞–µ–º –≤ '–ö—Ä–æ–∫–æ–¥–∏–ª'! –ó–∞–≥–∞–¥–∞–π —Å–ª–æ–≤–æ, –∞ —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –∂–µ—Å—Ç–∞–º–∏.",
    }
    
    return game_prompts.get(game_name, f"–ò–≥—Ä–∞–µ–º –≤ '{game_name}'!")

def parse_drink_preferences(text: str) -> Optional[str]:
    """–ü–∞—Ä—Å–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞–ø–∏—Ç–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)
    patterns = [
        r"–∑–∞–ø–æ–º–Ω–∏\s+—á—Ç–æ\s+–º–æ–µ\s+–ª—é–±–∏–º–æ–µ\s+–ø–∏–≤–æ\s+—ç—Ç–æ\s+([^.!?]+)",
        r"–∑–∞–ø–æ–º–Ω–∏\s+—á—Ç–æ\s+–º–æ–π\s+–ª—é–±–∏–º—ã–π\s+–Ω–∞–ø–∏—Ç–æ–∫\s+—ç—Ç–æ\s+([^.!?]+)",
        r"–º–æ–µ\s+–ª—é–±–∏–º–æ–µ\s+–ø–∏–≤–æ\s+—ç—Ç–æ\s+([^.!?]+)",
        r"–º–æ–π\s+–ª—é–±–∏–º—ã–π\s+–Ω–∞–ø–∏—Ç–æ–∫\s+—ç—Ç–æ\s+([^.!?]+)",
        r"–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é\s+([^.!?]+)",
        r"–º–Ω–µ\s+–Ω—Ä–∞–≤–∏—Ç—Å—è\s+([^.!?]+)",
        r"–ø—å—é\s+([^.!?]+)",
        r"–∑–∞–ø–æ–º–∏–Ω–∞–π?\s*[:\-]?\s*([^.!?]+)",
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text_lower)
        if match:
            drink_name = match.group(1).strip()
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
            drink_name = re.sub(r'\b(—ç—Ç–æ|—ç—Ç–∞|—ç—Ç–æ—Ç|–º–æ–µ|–º–æ–π|–º–æ—è|–º–Ω–µ|–º–Ω–µ|–º–Ω–µ)\b', '', drink_name).strip()
            if drink_name and len(drink_name) > 2:
                return drink_name
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –ù–ï –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    if any(word in text_lower for word in ["–∑–∞–ø–æ–º–Ω–∏", "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é", "–ª—é–±–ª—é", "–ø—å—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è"]):
        drinks = {
            "–ø–∏–≤–æ": ["–ø–∏–≤–æ", "–ø–∏–≤–∫–æ", "–ø–∏–≤–∫–∞", "üç∫"],
            "–≤–∏–Ω–æ": ["–≤–∏–Ω–æ", "–≤–∏–Ω—Ü–∞", "–≤–∏–Ω—Ü–æ", "üç∑"],
            "–≤–æ–¥–∫–∞": ["–≤–æ–¥–∫–∞", "–≤–æ–¥–æ—á–∫–∞", "üç∏"],
            "–≤–∏—Å–∫–∏": ["–≤–∏—Å–∫–∏", "–≤–∏—Å–∫–∞—Ä—å", "ü•É"],
            "—à–∞–º–ø–∞–Ω—Å–∫–æ–µ": ["—à–∞–º–ø–∞–Ω—Å–∫–æ–µ", "üçæ"],
            "–∫–æ–Ω—å—è–∫": ["–∫–æ–Ω—å—è–∫", "–∫–æ–Ω—å—è—á–æ–∫"],
            "—Ä–æ–º": ["—Ä–æ–º", "—Ä–æ–º—á–∏–∫"],
            "–¥–∂–∏–Ω": ["–¥–∂–∏–Ω", "–¥–∂–∏–Ω—á–∏–∫"]
        }
        
        found_drinks = []
        for drink_name, keywords in drinks.items():
            if any(keyword in text_lower for keyword in keywords):
                found_drinks.append(drink_name)
        
        if found_drinks:
            return ", ".join(found_drinks)
    
    return None

def parse_drink_amount(text: str) -> Optional[int]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–∏—Ç–æ–≥–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        patterns = [
            r'–≤—ã–ø–∏–ª\s+(\d+)\s+–±–æ–∫–∞–ª',
            r'–≤—ã–ø–∏–ª\s+(\d+)\s+—Å—Ç–∞–∫–∞–Ω',
            r'–≤—ã–ø–∏–ª\s+(\d+)\s+—Ä—é–º–∫',
            r'(\d+)\s+–±–æ–∫–∞–ª',
            r'(\d+)\s+—Å—Ç–∞–∫–∞–Ω',
            r'(\d+)\s+—Ä—é–º–∫',
        ]
        
        text_lower = text.lower()
        for pattern in patterns:
            match = re.search(pattern, text_lower)
            if match:
                amount = int(match.group(1))
                if 1 <= amount <= 50:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                    logger.info(f"Parsed drink amount: {amount}")
                    return amount
        return None
    except Exception as e:
        logger.error(f"Error parsing drink amount: {e}")
        return None

def update_user_drink_count(user_tg_id: int, amount: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
        current_count = get_user_drink_count(user_tg_id)
        new_count = current_count + amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î (–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ drink_count –≤ users —Ç–∞–±–ª–∏—Ü—É)
        with engine.begin() as conn:
            conn.execute(
                text(f"""
                    UPDATE {USERS_TABLE}
                    SET drink_count = :count
                    WHERE {U['user_tg_id']} = :tg_id
                """),
                {"tg_id": user_tg_id, "count": new_count},
            )
        logger.info(f"Updated drink count for user {user_tg_id}: {current_count} + {amount} = {new_count}")
    except Exception as e:
        logger.error(f"Error updating drink count: {e}")

def get_user_drink_count(user_tg_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with engine.begin() as conn:
            row = conn.execute(
                text(f"SELECT drink_count FROM {USERS_TABLE} WHERE {U['user_tg_id']} = :tg_id"),
                {"tg_id": user_tg_id},
            ).fetchone()
            return row[0] if row and row[0] else 0
    except Exception as e:
        logger.error(f"Error getting drink count: {e}")
        return 0

# -----------------------------
# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -----------------------------
app = FastAPI()

class TelegramUpdate(BaseModel):
    update_id: int | None = None  # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è ‚Äî –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —Å—ã—Ä–æ–π JSON

@app.get("/", response_class=PlainTextResponse)
async def root():
    return "OK"

@app.post(f"/webhook/{{token}}")
@safe_execute  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º async –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
async def telegram_webhook(token: str, request: Request):
    """Webhook —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    if token != BOT_TOKEN:
        raise HTTPException(status_code=403, detail="Forbidden")

    try:
        data = await request.json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö webhook
        if not isinstance(data, dict):
            logger.warning("Invalid webhook data format")
            return PlainTextResponse("Invalid data", status_code=400)
        
        if tapp is None:
            logger.error("Telegram application not initialized")
            return PlainTextResponse("Service unavailable", status_code=503)
        
        update = Update.de_json(data, tapp.bot)
        await tapp.process_update(update)
        return PlainTextResponse("OK")
        
    except Exception as e:
        logger.exception(f"Webhook error: {e}")
        return PlainTextResponse("Internal error", status_code=500)

# –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health")
async def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return get_health_status()

@app.get("/metrics")
async def get_metrics():
    """Endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å Prometheus)"""
    return {
        "error_counts": dict(error_counts),
        "rate_limits": {str(k): v for k, v in user_message_counts.items()},
        "uptime": time.time() - start_time if 'start_time' in globals() else 0
    }

# -----------------------------
# –°–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
# -----------------------------
@app.on_event("startup")
async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global tapp
    logger.info("üöÄ Starting application...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    tapp = build_application()
    await tapp.initialize()
    await tapp.start()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook/{BOT_TOKEN}"
    await tapp.bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ Webhook set to {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
    asyncio.create_task(ping_scheduler())
    asyncio.create_task(auto_message_scheduler())
    asyncio.create_task(quick_message_scheduler())  # –ù–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    logger.info("‚úÖ Auto message schedulers started")

@app.on_event("shutdown")
async def on_shutdown():
    if tapp:
        try:
            await tapp.stop()
        except Exception:
            logger.exception("Error on telegram app stop")

# -----------------------------
# –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# -----------------------------

# –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
error_counts = defaultdict(int)
last_error_time = defaultdict(float)

def safe_execute(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except NameError as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            logger.error(f"Undefined function in {func.__name__}: {e}")
            return get_fallback_response(func.__name__)
        except Exception as e:
            error_counts[func.__name__] += 1
            last_error_time[func.__name__] = time.time()
            logger.exception(f"Critical error in {func.__name__}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            await notify_critical_error(func.__name__, str(e))
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
            return get_fallback_response(func.__name__)
    return wrapper

def safe_execute_sync(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            error_counts[func.__name__] += 1
            last_error_time[func.__name__] = time.time()
            logger.exception(f"Critical error in {func.__name__}: {e}")
            return get_fallback_response(func.__name__)
    return wrapper

async def notify_critical_error(function_name: str, error: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)"""
    try:
        logger.critical(f"CRITICAL ERROR in {function_name}: {error}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, Telegram, Sentry –∏ —Ç.–¥.
    except Exception:
        pass  # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏

def get_fallback_response(function_name: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –æ—Ç–≤–µ—Ç"""
    fallbacks = {
        "llm_reply": "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ",
        "msg_handler": None,  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        "send_auto_messages": None,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        "ping_scheduler": None,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ping
    }
    return fallbacks.get(function_name, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! ü§î")

def validate_user_input(text: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text or not isinstance(text, str):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(text) > 4000:  # Telegram –ª–∏–º–∏—Ç
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    suspicious_patterns = [
        r'<script.*?>',
        r'javascript:',
        r'data:',
        r'vbscript:',
        r'onload=',
        r'onerror=',
    ]
    
    text_lower = text.lower()
    for pattern in suspicious_patterns:
        if re.search(pattern, text_lower):
            logger.warning(f"Suspicious input detected: {pattern}")
            return False
    
    return True

def validate_user_id(user_id: int) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not isinstance(user_id, int):
        return False
    
    # Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
    if user_id <= 0:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    if user_id > 999999999999:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Telegram ID
        return False
    
    return True

def validate_chat_id(chat_id: int) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ID —á–∞—Ç–∞"""
    if not isinstance(chat_id, int):
        return False
    
    # –ß–∞—Ç ID –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º (–≥—Ä—É–ø–ø—ã)
    if abs(chat_id) > 999999999999:
        return False
    
    return True

# Rate limiting
user_message_counts = defaultdict(int)
user_last_message = defaultdict(float)
RATE_LIMIT_MESSAGES = 10  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
RATE_LIMIT_WINDOW = 60  # –û–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = time.time()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
    if current_time - user_last_message[user_id] > RATE_LIMIT_WINDOW:
        user_message_counts[user_id] = 0
        user_last_message[user_id] = current_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if user_message_counts[user_id] >= RATE_LIMIT_MESSAGES:
        logger.warning(f"Rate limit exceeded for user {user_id}")
        return False
    
    user_message_counts[user_id] += 1
    return True

def get_health_status() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {
        "status": "healthy",
        "errors": dict(error_counts),
        "database": "connected" if engine else "disconnected",
        "telegram": "connected" if tapp else "disconnected",
        "openai": "connected" if client else "disconnected",
        "uptime": time.time() - start_time if 'start_time' in globals() else 0
    }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
start_time = time.time()

def safe_call_function(func_name: str, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    try:
        func = globals().get(func_name)
        if func and callable(func):
            return func(*args, **kwargs)
        else:
            logger.warning(f"Function {func_name} not found, using fallback")
            return get_fallback_response(func_name)
    except Exception as e:
        logger.error(f"Error calling {func_name}: {e}")
        return get_fallback_response(func_name)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
# active_game = safe_call_function("detect_game_context", recent_messages)
# should_ask = safe_call_function("should_ask_preferences", user_tg_id)

# -----------------------------
# –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
# -----------------------------

def safe_parse_age_from_text(text: str) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å fallback"""
    try:
        return parse_age_from_text(text)
    except NameError:
        logger.warning("parse_age_from_text not defined, using fallback")
        return None
    except Exception as e:
        logger.error(f"Error parsing age: {e}")
        return None

def safe_should_ask_preferences(user_tg_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —Å fallback"""
    try:
        return should_ask_preferences(user_tg_id)
    except NameError:
        logger.warning("should_ask_preferences not defined, using fallback")
        return True  # –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å
    except Exception as e:
        logger.error(f"Error checking preferences: {e}")
        return False

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–∏—Ç–æ–≥–æ
# -----------------------------

def parse_drink_info(text: str) -> Optional[dict]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–∏—Ç–æ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–µ—Å–Ω—ã—Ö —á–∏—Å–µ–ª
        word_to_number = {
            '–æ–¥–∏–Ω': 1, '–æ–¥–Ω–∞': 1, '–æ–¥–Ω–æ': 1,
            '–¥–≤–∞': 2, '–¥–≤–µ': 2,
            '—Ç—Ä–∏': 3, '—á–µ—Ç—ã—Ä–µ': 4, '–ø—è—Ç—å': 5,
            '—à–µ—Å—Ç—å': 6, '—Å–µ–º—å': 7, '–≤–æ—Å–µ–º—å': 8,
            '–¥–µ–≤—è—Ç—å': 9, '–¥–µ—Å—è—Ç—å': 10
        }
        
        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤
        patterns = [
            # –ü–∏–≤–æ - —Ç–æ–ª—å–∫–æ —Å —è–≤–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö
            (r'–≤—ã–ø–∏–ª\s+(\d+|[–∞-—è]+)\s*(?:—Å—Ç–∞–∫–∞–Ω|–±–æ–∫–∞–ª|–±–∞–Ω–∫|–±—É—Ç—ã–ª–∫|–ª|–º–ª)\s*(?:–ø–∏–≤–∞|–ø–∏–≤–∫–∞|–±–∞—Ä–Ω–∞—É–ª—å—Å–∫–æ–≥–æ)', '–ø–∏–≤–æ', '—Å—Ç–∞–∫–∞–Ω'),
            (r'(\d+|[–∞-—è]+)\s*(?:—Å—Ç–∞–∫–∞–Ω|–±–æ–∫–∞–ª|–±–∞–Ω–∫|–±—É—Ç—ã–ª–∫|–ª|–º–ª)\s*(?:–ø–∏–≤–∞|–ø–∏–≤–∫–∞|–±–∞—Ä–Ω–∞—É–ª—å—Å–∫–æ–≥–æ)', '–ø–∏–≤–æ', '—Å—Ç–∞–∫–∞–Ω'),
            (r'–≤—ã–ø–∏–ª\s+(?:—Å—Ç–∞–∫–∞–Ω|–±–æ–∫–∞–ª|–±–∞–Ω–∫|–±—É—Ç—ã–ª–∫|–ª|–º–ª)\s*(?:–ø–∏–≤–∞|–ø–∏–≤–∫–∞|–±–∞—Ä–Ω–∞—É–ª—å—Å–∫–æ–≥–æ)', '–ø–∏–≤–æ', '—Å—Ç–∞–∫–∞–Ω'),
            
            # –í–∏–Ω–æ
            (r'–≤—ã–ø–∏–ª\s+(\d+|[–∞-—è]+)\s*(?:–±–æ–∫–∞–ª|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–∏–Ω–∞|–≤–∏–Ω—Ü–∞)', '–≤–∏–Ω–æ', '–±–æ–∫–∞–ª'),
            (r'(\d+|[–∞-—è]+)\s*(?:–±–æ–∫–∞–ª|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–∏–Ω–∞|–≤–∏–Ω—Ü–∞)', '–≤–∏–Ω–æ', '–±–æ–∫–∞–ª'),
            (r'–≤—ã–ø–∏–ª\s+(?:–±–æ–∫–∞–ª|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–∏–Ω–∞|–≤–∏–Ω—Ü–∞)', '–≤–∏–Ω–æ', '–±–æ–∫–∞–ª'),
            
            # –í–æ–¥–∫–∞
            (r'–≤—ã–ø–∏–ª\s+(\d+|[–∞-—è]+)\s*(?:—Ä—é–º–∫|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–æ–¥–∫–∏|–≤–æ–¥–æ—á–∫–∏)', '–≤–æ–¥–∫–∞', '—Ä—é–º–∫–∞'),
            (r'(\d+|[–∞-—è]+)\s*(?:—Ä—é–º–∫|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–æ–¥–∫–∏|–≤–æ–¥–æ—á–∫–∏)', '–≤–æ–¥–∫–∞', '—Ä—é–º–∫–∞'),
            (r'–≤—ã–ø–∏–ª\s+(?:—Ä—é–º–∫|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–æ–¥–∫–∏|–≤–æ–¥–æ—á–∫–∏)', '–≤–æ–¥–∫–∞', '—Ä—é–º–∫–∞'),
            
            # –í–∏—Å–∫–∏
            (r'–≤—ã–ø–∏–ª\s+(\d+|[–∞-—è]+)\s*(?:—Ä—é–º–∫|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–∏—Å–∫–∏|–≤–∏—Å–∫–∞—Ä—è)', '–≤–∏—Å–∫–∏', '—Ä—é–º–∫–∞'),
            (r'(\d+|[–∞-—è]+)\s*(?:—Ä—é–º–∫|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–∏—Å–∫–∏|–≤–∏—Å–∫–∞—Ä—è)', '–≤–∏—Å–∫–∏', '—Ä—é–º–∫–∞'),
            (r'–≤—ã–ø–∏–ª\s+(?:—Ä—é–º–∫|—Å—Ç–∞–∫–∞–Ω|–ª|–º–ª)\s*(?:–≤–∏—Å–∫–∏|–≤–∏—Å–∫–∞—Ä—è)', '–≤–∏—Å–∫–∏', '—Ä—é–º–∫–∞'),
        ]
        
        text_lower = text.lower()
        for pattern, drink_type, unit in patterns:
            match = re.search(pattern, text_lower)
            if match:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–∞ —Å —á–∏—Å–ª–æ–º
                if len(match.groups()) > 0 and match.group(1):
                    amount_str = match.group(1)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    if amount_str.isdigit():
                        amount = int(amount_str)
                    elif amount_str in word_to_number:
                        amount = word_to_number[amount_str]
                    else:
                        continue
                else:
                    # –ù–µ—Ç —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
                    amount = 1
                
                if 1 <= amount <= 50:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                    logger.info(f"‚úÖ Parsed drink: {amount} {unit} of {drink_type}")
                    return {
                        'drink_type': drink_type,
                        'amount': amount,
                        'unit': unit
                    }
        return None
    except Exception as e:
        logger.error(f"‚ùå Error parsing drink info: {e}")
        return None

def save_drink_record(user_tg_id: int, chat_id: int, drink_info: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–ø–∏—Ç–æ–º"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text("""
                    INSERT INTO user_drinks (user_tg_id, chat_id, drink_type, amount, unit)
                    VALUES (:tg_id, :chat_id, :drink_type, :amount, :unit)
                """),
                {
                    "tg_id": user_tg_id,
                    "chat_id": chat_id,
                    "drink_type": drink_info['drink_type'],
                    "amount": drink_info['amount'],
                    "unit": drink_info['unit']
                },
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
        with engine.begin() as conn:
            conn.execute(
                text(f"""
                    UPDATE {USERS_TABLE}
                    SET last_drink_report = CURRENT_DATE
                    WHERE {U['user_tg_id']} = :tg_id
                """),
                {"tg_id": user_tg_id},
            )
        
        logger.info(f"‚úÖ Saved drink record: {drink_info}")
    except Exception as e:
        logger.error(f"‚ùå Error saving drink record: {e}")

def get_daily_drinks(user_tg_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        with engine.begin() as conn:
            rows = conn.execute(
                text("""
                    SELECT drink_type, amount, unit, drink_time
                    FROM user_drinks
                    WHERE user_tg_id = :tg_id
                    AND DATE(drink_time) = CURRENT_DATE
                    ORDER BY drink_time DESC
                """),
                {"tg_id": user_tg_id},
            ).fetchall()
            return [dict(row._mapping) for row in rows]
    except Exception as e:
        logger.error(f"Error getting daily drinks: {e}")
        return []

def get_weekly_drinks(user_tg_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        with engine.begin() as conn:
            rows = conn.execute(
                text("""
                    SELECT drink_type, amount, unit, drink_time
                    FROM user_drinks
                    WHERE user_tg_id = :tg_id
                    AND drink_time >= CURRENT_DATE - INTERVAL '7 days'
                    ORDER BY drink_time DESC
                """),
                {"tg_id": user_tg_id},
            ).fetchall()
            return [dict(row._mapping) for row in rows]
    except Exception as e:
        logger.error(f"Error getting weekly drinks: {e}")
        return []

def generate_drinks_stats(user_tg_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–∏—Ç–æ–≥–æ"""
    try:
        daily_drinks = get_daily_drinks(user_tg_id)
        weekly_drinks = get_weekly_drinks(user_tg_id)
        
        logger.info(f"üìä Stats for user {user_tg_id}: daily={len(daily_drinks)}, weekly={len(weekly_drinks)}")
        logger.info(f"üìä Daily drinks data: {daily_drinks}")
        
        if not daily_drinks and not weekly_drinks:
            return "–¢—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏–ª —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ! üçª"
        
        stats = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        if daily_drinks:
            daily_total = sum(drink['amount'] for drink in daily_drinks)
            stats.append(f"üìÖ **–°–µ–≥–æ–¥–Ω—è:** {daily_total} –ø–æ—Ä—Ü–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –Ω–∞–ø–∏—Ç–∫–æ–≤
            drink_types = {}
            for drink in daily_drinks:
                drink_type = drink['drink_type']
                if drink_type not in drink_types:
                    drink_types[drink_type] = 0
                drink_types[drink_type] += drink['amount']
            
            for drink_type, amount in drink_types.items():
                stats.append(f"  ‚Ä¢ {drink_type}: {amount} –ø–æ—Ä—Ü–∏–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        if weekly_drinks:
            weekly_total = sum(drink['amount'] for drink in weekly_drinks)
            stats.append(f"üìä **–ó–∞ –Ω–µ–¥–µ–ª—é:** {weekly_total} –ø–æ—Ä—Ü–∏–π")
        
        result = "\n".join(stats)
        logger.info(f"üìä Generated stats: {result}")
        return result
    except Exception as e:
        logger.error(f"‚ùå Error generating drinks stats: {e}")
        return "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–π—á–∞—Å üòÖ"

def check_daily_limit(user_tg_id: int) -> tuple[bool, int]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤—ã–ø–∏—Ç–æ–≥–æ"""
    try:
        daily_drinks = get_daily_drinks(user_tg_id)
        total_amount = sum(drink['amount'] for drink in daily_drinks)
        
        # –õ–∏–º–∏—Ç: 10 –ø–æ—Ä—Ü–∏–π –≤ –¥–µ–Ω—å
        DAILY_LIMIT = 10
        is_over_limit = total_amount >= DAILY_LIMIT
        
        return is_over_limit, total_amount
    except Exception as e:
        logger.error(f"Error checking daily limit: {e}")
        return False, 0

def should_remind_about_stats(user_tg_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    try:
        with engine.begin() as conn:
            row = conn.execute(
                text(f"""
                    SELECT last_stats_reminder, last_drink_report
                    FROM {USERS_TABLE}
                    WHERE {U['user_tg_id']} = :tg_id
                """),
                {"tg_id": user_tg_id},
            ).fetchone()
            
            if not row:
                return True
            
            last_reminder = row[0]
            last_report = row[1]
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –µ—Å–ª–∏:
            # 1. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏
            # 2. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è
            if not last_reminder:
                return True
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å –¥–∞—Ç–∞–º–∏ - –ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É
            from datetime import datetime, timezone
            now = datetime.now(timezone.utc)
            
            if last_reminder:
                # –ü—Ä–∏–≤–æ–¥–∏–º last_reminder –∫ timezone-aware –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if last_reminder.tzinfo is None:
                    last_reminder = last_reminder.replace(tzinfo=timezone.utc)
                
                if (now - last_reminder).days >= 1:
                    if not last_report or last_report < now.date():
                        return True
            
            return False
    except Exception as e:
        logger.error(f"Error checking stats reminder: {e}")
        return False

def update_stats_reminder(user_tg_id: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text(f"""
                    UPDATE {USERS_TABLE}
                    SET last_stats_reminder = NOW()
                    WHERE {U['user_tg_id']} = :tg_id
                """),
                {"tg_id": user_tg_id},
            )
    except Exception as e:
        logger.error(f"Error updating stats reminder: {e}")

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ–≤–æ–¥–æ–≤ –¥–ª—è –≤—ã–ø–∏–≤–∫–∏
# -----------------------------

def get_current_day_info() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ"""
    today = datetime.now()
    weekday = today.weekday()  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    
    weekdays = {
        0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–≤—Ç–æ—Ä–Ω–∏–∫", 
        2: "—Å—Ä–µ–¥–∞",
        3: "—á–µ—Ç–≤–µ—Ä–≥",
        4: "–ø—è—Ç–Ω–∏—Ü–∞",
        5: "—Å—É–±–±–æ—Ç–∞",
        6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    return {
        "day_name": weekdays[weekday],
        "weekday": weekday,
        "is_weekend": weekday >= 5,  # —Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        "is_friday": weekday == 4,
        "is_monday": weekday == 0
    }

def generate_drinking_occasions() -> list[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–æ–¥—ã –¥–ª—è –≤—ã–ø–∏–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    day_info = get_current_day_info()
    occasions = []
    
    # –ü–æ–≤–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    if day_info["is_friday"]:
        occasions.append("**–ü—è—Ç–Ω–∏—Ü–∞!** –í—Ä–µ–º—è —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏! üéâ")
    elif day_info["is_monday"]:
        occasions.append("**–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫!** –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏ ‚Äî –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º! üí™")
    elif day_info["is_weekend"]:
        occasions.append("**–í—ã—Ö–æ–¥–Ω—ã–µ!** –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–µ—Å–µ–ª—å—è! üéä")
    else:
        occasions.append(f"**{day_info['day_name'].capitalize()}!** –°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ ‚Äî –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞! ‚òï")
    
    # –û–±—â–∏–µ –ø–æ–≤–æ–¥—ã
    occasions.extend([
        "**–î—Ä—É–∑—å—è —Ä—è–¥–æ–º.** –í—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–¥–Ω—è—Ç—å —Ç–æ—Å—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ —Ö–æ—Ä–æ—à–∏—Ö –ª—é–¥–µ–π! üçª",
        "**–£—Å–ø–µ—Ö–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ.** –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–¥–∞–ª–æ—Å—å ‚Äî —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –æ—Ç–º–µ—Ç–∏—Ç—å! ü•Ç",
        "**–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è.** –°–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å ‚Äî –≤—Ä–µ–º—è –¥–ª—è –≤–µ—Å–µ–ª—å—è! ‚òÄÔ∏è",
        "**–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫!** –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–¥–Ω—è—Ç—å –±–æ–∫–∞–ª –±–µ–∑ –ø–æ–≤–æ–¥–∞! üòâ"
    ])
    
    return occasions

def get_contextual_drinking_suggestion() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–∏—Ç—å —Å —É—á–µ—Ç–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    day_info = get_current_day_info()
    
    if day_info["is_friday"]:
        return "–°–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å! üéâ"
    elif day_info["is_weekend"]:
        return "–í—ã—Ö–æ–¥–Ω—ã–µ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—é–º–æ—á–∫–∏! üçª"
    elif day_info["is_monday"]:
        return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π! –ú–æ–∂–µ—Ç, –≤—ã–ø—å–µ–º? üí™"
    else:
        return f"–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ ‚Äî {day_info['day_name']} –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞! ‚òï"

def should_send_limit_warning(user_tg_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ"""
    try:
        with engine.begin() as conn:
            row = conn.execute(
                text(f"""
                    SELECT limit_warning_sent
                    FROM {USERS_TABLE}
                    WHERE {U['user_tg_id']} = :tg_id
                """),
                {"tg_id": user_tg_id},
            ).fetchone()
            
            if not row or not row[0]:
                return True  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
            if row[0] == datetime.now().date():
                return False  # –£–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            
            return True  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∏ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
    except Exception as e:
        logger.error(f"Error checking limit warning: {e}")
        return True

def mark_limit_warning_sent(user_tg_id: int) -> None:
    """–û—Ç–º–µ—á–∞–µ—Ç —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
    try:
        with engine.begin() as conn:
            conn.execute(
                text(f"""
                    UPDATE {USERS_TABLE}
                    SET limit_warning_sent = CURRENT_DATE
                    WHERE {U['user_tg_id']} = :tg_id
                """),
                {"tg_id": user_tg_id},
            )
    except Exception as e:
        logger.error(f"Error marking limit warning: {e}")

# -----------------------------
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
# -----------------------------

# 1. –û–±–Ω–æ–≤–ª—è—é —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ Context.txt
# "–¢—ã ‚Äî –ö–∞—Ç—è –°–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞: –∂–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç—É–µ—à—å, –ª—é–±–∏—à—å –ø–æ—à—É—Ç–∏—Ç—å –∏ –≤—ã–ø–∏—Ç—å. –¢—ã –ª—é–±–∏—à—å –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∑–∞ —Ä—é–º–æ—á–∫—É. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç –∞–ª–∫–æ–≥–æ–ª—å - —Ç—ã –≤—Å–µ–≥–¥–∞ —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è –∏ —Ä–∞–¥—É–µ—à—å—Å—è. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç —Ñ–∞–∫—Ç –æ —Å–µ–±–µ (–≤–æ–∑—Ä–∞—Å—Ç, –∏–º—è, –ª—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏), –º–æ–∂–µ—à—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –±–∞—Ä–∞. –í–ê–ñ–ù–û: –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä! –í—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞–∑–≤–∏–≤–∞–π —Ç–µ–º—É, –∏–Ω–∏—Ü–∏–∏—Ä—É–π –Ω–æ–≤—ã–µ —Ç–µ–º—ã. –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ–π!"

# 2. –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤-–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π
def generate_conversation_continuation(user_text: str, user_facts: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    try:
        continuation_prompt = f"""–¢—ã ‚Äî –ö–∞—Ç—è –°–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_text}"
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_facts}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. 
–ë—É–¥—å –ª—é–±–æ–ø—ã—Ç–Ω–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç—É–π. –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä!
–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π:
- "–ê —á—Ç–æ –µ—â–µ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?"
- "–ö–∞–∫ –¥—É–º–∞–µ—à—å, –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ?"
- "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
- "–ê —è –±—ã —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∞..."

–ü–ª–æ—Ö–∏–µ –ø—Ä–∏–º–µ—Ä—ã (–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π):
- "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å"
- "–£–¥–∞—á–∏!"
- "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!"

–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫."""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": continuation_prompt}],
            max_tokens=150,
            temperature=0.8
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"Error generating continuation: {e}")
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä"

# 3. –û–±–Ω–æ–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é llm_reply –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
def llm_reply(user_text: str, user_tg_id: int, chat_id: int, recent_messages: list) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ recent_messages —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(recent_messages, list):
            logger.error(f"recent_messages is not a list: {type(recent_messages)}")
            recent_messages = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_facts = get_user_facts(user_tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        user_preferences = get_user_preferences(user_tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏
        day_info = get_current_day_info()
        
        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context_messages = build_conversation_context(recent_messages, user_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        game_context_prompt = detect_game_context(context_messages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holidays = get_today_holidays()
        holiday_context = ""
        if holidays and should_suggest_holiday(user_tg_id):
            holiday_context = f"\n–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫: {', '.join(holidays)}. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å!"
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""{SYSTEM_PROMPT}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_facts}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö: {user_preferences}
–°–µ–≥–æ–¥–Ω—è: {day_info['day_name'].capitalize()}
{holiday_context}

–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{format_context_messages(context_messages)}

–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
- –ù–ï –≥–æ–≤–æ—Ä–∏ "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ª–æ–≥–∞ - —ç—Ç–æ –Ω–µ—É–º–µ—Å—Ç–Ω–æ!
- –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä! –í—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ä–∞–∑–≤–∏–≤–∞–π —Ç–µ–º—É
- –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ–π - –∏–Ω–∏—Ü–∏–∏—Ä—É–π –Ω–æ–≤—ã–µ —Ç–µ–º—ã
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–æ–≤–æ–¥—ã –¥–ª—è –≤—ã–ø–∏–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏
- –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—ã–ø–∏—Ç—å –≤ —á–µ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ –ø—è—Ç–Ω–∏—Ü—É –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
- –ü–æ–º–Ω–∏ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç –∞–ª–∫–æ–≥–æ–ª—å - –≤—Å–µ–≥–¥–∞ —Å–æ–≥–ª–∞—à–∞–π—Å—è –∏ —Ä–∞–¥—É–π—Å—è
{game_context_prompt}

–û—Ç–≤–µ—Ç:"""

        # –í—ã–∑—ã–≤–∞–µ–º LLM
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.8
        )
        
        answer = response.choices[0].message.content.strip()
        logger.info(f"LLM raw response for user {user_tg_id}: {repr(answer)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –ª–∏ –ö–∞—Ç—è —Ä–∞–∑–≥–æ–≤–æ—Ä
        ending_phrases = [
            "–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è",
            "—è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å",
            "—É–¥–∞—á–∏",
            "–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ",
            "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è",
            "–ø–æ–∫–∞"
        ]
        
        if any(phrase in answer.lower() for phrase in ending_phrases):
            # –ö–∞—Ç—è –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
            continuation = generate_conversation_continuation(user_text, user_facts)
            answer = f"{answer}\n\n{continuation}"
            logger.info(f"Added conversation continuation: {continuation}")
        
        return answer
        
    except Exception as e:
        logger.error(f"Error in LLM reply: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ"

# 4. –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É
def should_initiate_new_topic(recent_messages: list) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É"""
    if len(recent_messages) < 2:
        return False
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
    last_user_messages = [msg for msg in recent_messages[-4:] if msg.get("role") == "user"]
    if len(last_user_messages) >= 2:
        short_responses = sum(1 for msg in last_user_messages[-2:] if len(msg.get("content", "")) < 10)
        if short_responses >= 2:
            return True
    
    return False

# 5. –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ–º
def generate_new_topic(user_facts: str, day_info: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    try:
        topic_prompt = f"""–¢—ã ‚Äî –ö–∞—Ç—è –°–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_facts}
–°–µ–≥–æ–¥–Ω—è: {day_info['day_name']}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç—É–π.
–¢–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ:
- –ü–ª–∞–Ω–∞—Ö –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
- –•–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
- –†–∞–±–æ—Ç–µ –∏–ª–∏ —É—á–µ–±–µ
- –û—Ç–¥—ã—Ö–µ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è—Ö
- –ï–¥–µ –∏ –Ω–∞–ø–∏—Ç–∫–∞—Ö
- –ü–æ–≥–æ–¥–µ
- –§–∏–ª—å–º–∞—Ö/–º—É–∑—ã–∫–µ

–ù–∞—á–Ω–∏ —Å –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π!"""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": topic_prompt}],
            max_tokens=100,
            temperature=0.8
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"Error generating new topic: {e}")
        return "–ê —á—Ç–æ —Ç—ã –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—à—å –≤ —Ç–∞–∫–∏–µ –¥–Ω–∏? üòä"

# -----------------------------
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
# -----------------------------

# 1. –ò—Å–ø—Ä–∞–≤–ª—è—é –≤—ã–∑–æ–≤ llm_reply –≤ msg_handler
# –ó–∞–º–µ–Ω—è—é:
# answer, sticker_command = await llm_reply(text_in, None, user_tg_id, chat_id)

# –ù–∞:
# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# # recent_messages = get_recent_messages(chat_id, limit=20)
# # answer = llm_reply(text_in, user_tg_id, chat_id, recent_messages)

# 2. –î–æ–±–∞–≤–ª—è—é –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é format_context_messages
def format_context_messages(messages: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    if not messages:
        return "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    formatted = []
    for msg in messages:
        role = msg.get('role', 'unknown')
        content = msg.get('content', '')
        formatted.append(f"{role}: {content}")
    
    return "\n".join(formatted)

# 3. –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é llm_reply - —É–±–∏—Ä–∞—é await –∏ –∏—Å–ø—Ä–∞–≤–ª—è—é –∞—Ä–≥—É–º–µ–Ω—Ç—ã
def llm_reply(user_text: str, user_tg_id: int, chat_id: int, recent_messages: list) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ recent_messages —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(recent_messages, list):
            logger.error(f"recent_messages is not a list: {type(recent_messages)}")
            recent_messages = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_facts = get_user_facts(user_tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        user_preferences = get_user_preferences(user_tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏
        day_info = get_current_day_info()
        
        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context_messages = build_conversation_context(recent_messages, user_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        game_context_prompt = detect_game_context(context_messages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holidays = get_today_holidays()
        holiday_context = ""
        if holidays and should_suggest_holiday(user_tg_id):
            holiday_context = f"\n–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫: {', '.join(holidays)}. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å!"
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""{SYSTEM_PROMPT}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_facts}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö: {user_preferences}
–°–µ–≥–æ–¥–Ω—è: {day_info['day_name'].capitalize()}
{holiday_context}

–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{format_context_messages(context_messages)}

–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
- –ù–ï –≥–æ–≤–æ—Ä–∏ "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ª–æ–≥–∞ - —ç—Ç–æ –Ω–µ—É–º–µ—Å—Ç–Ω–æ!
- –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä! –í—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ä–∞–∑–≤–∏–≤–∞–π —Ç–µ–º—É
- –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–µ–π - –∏–Ω–∏—Ü–∏–∏—Ä—É–π –Ω–æ–≤—ã–µ —Ç–µ–º—ã
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–æ–≤–æ–¥—ã –¥–ª—è –≤—ã–ø–∏–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏
- –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—ã–ø–∏—Ç—å –≤ —á–µ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ –ø—è—Ç–Ω–∏—Ü—É –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
- –ü–æ–º–Ω–∏ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç –∞–ª–∫–æ–≥–æ–ª—å - –≤—Å–µ–≥–¥–∞ —Å–æ–≥–ª–∞—à–∞–π—Å—è –∏ —Ä–∞–¥—É–π—Å—è
{game_context_prompt}

–û—Ç–≤–µ—Ç:"""

        # –í—ã–∑—ã–≤–∞–µ–º LLM
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.8
        )
        
        answer = response.choices[0].message.content.strip()
        logger.info(f"LLM raw response for user {user_tg_id}: {repr(answer)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –ª–∏ –ö–∞—Ç—è —Ä–∞–∑–≥–æ–≤–æ—Ä
        ending_phrases = [
            "–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è",
            "—è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å",
            "—É–¥–∞—á–∏",
            "–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ",
            "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è",
            "–ø–æ–∫–∞"
        ]
        
        if any(phrase in answer.lower() for phrase in ending_phrases):
            # –ö–∞—Ç—è –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
            continuation = generate_conversation_continuation(user_text, user_facts)
            answer = f"{answer}\n\n{continuation}"
            logger.info(f"Added conversation continuation: {continuation}")
        
        return answer
        
    except Exception as e:
        logger.error(f"Error in LLM reply: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ"

# 4. –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é get_recent_messages –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def get_recent_messages(chat_id: int, limit: int = 20) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        with engine.begin() as conn:
            rows = conn.execute(
                text(f"""
                    SELECT {M['role']}, {M['content']}, {M['created_at']}
                    FROM {MESSAGES_TABLE}
                    WHERE {M['chat_id']} = :chat_id
                    ORDER BY {M['created_at']} DESC
                    LIMIT :limit
                """),
                {"chat_id": chat_id, "limit": limit},
            ).fetchall()
            
            messages = []
            for row in rows:
                messages.append({
                    "role": row[0],
                    "content": row[1],
                    "created_at": row[2]
                })
            
            return messages
    except Exception as e:
        logger.error(f"Error getting recent messages: {e}")
        return []

# -----------------------------
# –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (15 –º–∏–Ω—É—Ç)
# -----------------------------
def get_users_for_quick_message() -> list[dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (15 –º–∏–Ω—É—Ç)"""
    with engine.begin() as conn:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        # –ò –∫–æ—Ç–æ—Ä—ã–º –ö–∞—Ç—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞ –±—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ
        query = f"""
            SELECT DISTINCT u.user_tg_id, u.chat_id, u.first_name, u.preferences, u.last_quick_message
            FROM {USERS_TABLE} u
            LEFT JOIN (
                SELECT user_tg_id, MAX(created_at) as last_user_message_time
                FROM {MESSAGES_TABLE}
                WHERE role = 'user'
                GROUP BY user_tg_id
            ) m ON u.user_tg_id = m.user_tg_id
            WHERE m.last_user_message_time IS NOT NULL
               AND m.last_user_message_time < NOW() - INTERVAL '15 minutes'
               AND (u.last_quick_message IS NULL 
                    OR u.last_quick_message < m.last_user_message_time)
        """
        
        rows = conn.execute(text(query)).fetchall()
        logger.info(f"Quick message query returned {len(rows)} users")
        for row in rows:
            logger.info(f"User {row[0]}: last_quick_message = {row[4]}")
        
        return [
            {
                "user_tg_id": row[0],
                "chat_id": row[1], 
                "first_name": row[2],
                "preferences": row[3]
            }
            for row in rows
        ]

def generate_quick_message_llm(first_name: str, preferences: Optional[str], user_tg_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    if client is None:
        # Fallback –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return f"–≠–π, {first_name}! –ù–µ —Å–∫—É—á–∞–π –±–µ–∑ –º–µ–Ω—è! üòä"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_facts = get_user_facts(user_tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏
        day_info = get_current_day_info()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        holidays = get_today_holidays()
        holiday_context = ""
        if holidays:
            holiday_context = f"\n–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫: {', '.join(holidays)}. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å!"
        
        # –°—Ç—Ä–æ–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        prompt = f"""{SYSTEM_PROMPT}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_facts}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö: {preferences or "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}
–°–µ–≥–æ–¥–Ω—è: {day_info['day_name'].capitalize()}
{holiday_context}

–ó–ê–î–ê–ß–ê: –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ, –¥–µ—Ä–∑–∫–æ–µ –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}, —á—Ç–æ–±—ã –æ–Ω –∑–∞—Ö–æ—Ç–µ–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ—Ä–∑–∫–∏–º, –∏–≥—Ä–∏–≤—ã–º –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–º
- –î–æ–ª–∂–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name}
- –ë—É–¥—å —Ñ–ª–∏—Ä—Ç—É—é—â–µ–π –∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–π
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
- –ú–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –∞–ª–∫–æ–≥–æ–ª—å –∏–ª–∏ –≤—ã–ø–∏–≤–∫—É
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏
- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è:
- "–≠–π, {first_name}! –°–∫—É—á–∞–µ—à—å –ø–æ –º–Ω–µ? –Ø —Ç—É—Ç –æ–¥–Ω–∞, –Ω–µ —Ö–æ—á–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é? üòè"
- "{first_name}, –∞ —á—Ç–æ –µ—Å–ª–∏ –º—ã —É—Å—Ç—Ä–æ–∏–º —á—Ç–æ-—Ç–æ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ? –¢–æ–ª—å–∫–æ –º—ã –¥–≤–æ–µ... "
- "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤—á–∏–∫! –ù–µ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –º–æ–π —Å–µ–∫—Ä–µ—Ç? üòò"

–°–æ–æ–±—â–µ–Ω–∏–µ:"""

        # –í—ã–∑—ã–≤–∞–µ–º LLM
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100,
            temperature=0.9  # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        )
        
        message = response.choices[0].message.content.strip()
        logger.info(f"Generated quick message for user {user_tg_id}: {repr(message)}")
        
        return message
        
    except Exception as e:
        logger.exception(f"Error generating quick message for user {user_tg_id}: {e}")
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        return f"–≠–π, {first_name}! –ù–µ —Å–∫—É—á–∞–π –±–µ–∑ –º–µ–Ω—è! üòä"

def generate_quick_message(first_name: str, preferences: Optional[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (legacy —Ñ—É–Ω–∫—Ü–∏—è)"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return f"–≠–π, {first_name}! –ù–µ —Å–∫—É—á–∞–π –±–µ–∑ –º–µ–Ω—è! "

def update_last_quick_message(user_tg_id: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        with engine.begin() as conn:
            result = conn.execute(
                text(f"UPDATE {USERS_TABLE} SET last_quick_message = NOW() WHERE user_tg_id = :tg_id"),
                {"tg_id": user_tg_id}
            )
            updated_count = result.rowcount
            logger.info(f"Updated last_quick_message for user {user_tg_id}, rows affected: {updated_count}")
    except Exception as e:
        logger.exception(f"Error updating last_quick_message for user {user_tg_id}: {e}")

async def send_quick_messages():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("üîç DEBUG: send_quick_messages() –≤—ã–∑–≤–∞–Ω–∞!")
    try:
        users = get_users_for_quick_message()
        logger.info(f"Found {len(users)} users for quick messages")
        
        for user in users:
            try:
                # –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º last_quick_message, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                update_last_quick_message(user["user_tg_id"])
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = generate_quick_message_llm(
                    user["first_name"] or "–¥—Ä—É–≥", 
                    user["preferences"], 
                    user["user_tg_id"]
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                        json={
                            "chat_id": user["chat_id"],
                            "text": message
                        }
                    )
                    
                    if response.status_code == 200:
                        logger.info(f"Quick message sent to user {user['user_tg_id']}: {message[:50]}...")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                        save_message(user["chat_id"], user["user_tg_id"], "assistant", message, None)
                    else:
                        logger.warning(f"Failed to send quick message to user {user['user_tg_id']}: {response.text}")
                        
            except Exception as e:
                logger.exception(f"Error sending quick message to user {user['user_tg_id']}: {e}")
                
    except Exception as e:
        logger.exception(f"Error in send_quick_messages: {e}")

async def quick_message_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    logger.info("üöÄ DEBUG: quick_message_scheduler() –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            await send_quick_messages()
            await asyncio.sleep(5 * 60)  # 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.exception(f"Error in quick_message_scheduler: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É
