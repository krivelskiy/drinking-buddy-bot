import os
import logging
from typing import Optional

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

from openai import OpenAI

from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.orm import sessionmaker, declarative_base

# ---------------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ---------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger("app")

# ---------------------------
# –û–ö–†–£–ñ–ï–ù–ò–ï
# ---------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_BASE_URL = os.getenv("APP_BASE_URL")  # –Ω–∞–ø—Ä. https://drinking-buddy-bot.onrender.com
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./memory.db")

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN is missing")
if not OPENAI_API_KEY:
    logger.error("‚ùå OPENAI_API_KEY is missing")
if not APP_BASE_URL:
    logger.warning("‚ö†Ô∏è APP_BASE_URL is missing (–∞–≤—Ç–æ-—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞)")

# ---------------------------
# OpenAI
# ---------------------------
client: Optional[OpenAI] = None
try:
    client = OpenAI(api_key=OPENAI_API_KEY)
    logger.info("‚úÖ OpenAI client initialized")
except Exception as e:
    logger.exception("‚ùå OpenAI init failed: %s", e)

# ---------------------------
# –ë–ê–ó–ê (SQLAlchemy)
# ---------------------------
Base = declarative_base()
engine = create_engine(DATABASE_URL, echo=False, future=True)
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)


class UserMemory(Base):
    __tablename__ = "user_memory"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, index=True, unique=True)
    name = Column(String(100))
    favorite_drink = Column(String(100))
    history = Column(Text)


try:
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ Database initialized")
except Exception as e:
    logger.exception("‚ùå Database init failed: %s", e)

# ---------------------------
# Telegram bot (PTB v20)
# ---------------------------
tapp = Application.builder().token(BOT_TOKEN).build()

# –°—Ç–∏–∫–µ—Ä—ã
STICKERS = {
    "–≤–æ–¥–∫–∞": "CAACAgIAAxkBAAEBjr5ouGBBx_1-DTY7HwkdW3rQWOcgRAACsIAAAiFbyEn_G4lgoMu7IjYE",
    "–≤–∏—Å–∫–∏": "CAACAgIAAxkBAAEBjsBouGBSGJX2UPfsKzHTIYlfD7eAswACDH8AAnEbyEnqwlOYBHZL3jYE",
    "–≤–∏–Ω–æ":  "CAACAgIAAxkBAAEBjsJouGBk6eEZ60zhrlVYxtaa6o1IpwACzoEAApg_wUm0xElTR8mU3zYE",
    "–ø–∏–≤–æ":  "CAACAgIAAxkBAAEBjsRouGBy8fdkWj0MhodvqLl3eT9fcgACX4cAAvmhwElmpyDuoHw7IjYE",
    "–≥—Ä—É—Å—Ç—å":  "CAACAgIAAxkBAAEBjrxouGAyqkcwuIJiCaINHEu-QVn4NAAC1IAAAhynyUnZmmKvP768xzYE",
    "–≤–µ—Å–µ–ª—å–µ": "CAACAgIAAxkBAAEBjrpouGAERwa1uHIJiB5lkhQZps-j_wACcoEAAlGlwEnCOTC-IwMCBDYE",
}

# ---------------------------
# –•–µ–ª–ø–µ—Ä—ã –ø–∞–º—è—Ç–∏
# ---------------------------
def _save_history(session, user_id: int, user_name: str, user_text: str, bot_text: str | None = None):
    mem = session.query(UserMemory).filter_by(user_id=user_id).first()
    if not mem:
        mem = UserMemory(user_id=user_id, name=user_name, favorite_drink="", history="")
        session.add(mem)
        session.flush()
    if user_text:
        mem.history = (mem.history or "") + f"\nUser: {user_text}"
    if bot_text:
        mem.history = (mem.history or "") + f"\nBot: {bot_text}"
    session.commit()
    return mem


def _maybe_extract_favorite_drink(mem: UserMemory, text: str) -> None:
    low = text.lower()
    if "–ª—é–±–∏–º" in low:
        for drink in ("–ø–∏–≤–æ", "–≤–∏–Ω–æ", "–≤–æ–¥–∫–∞", "–≤–∏—Å–∫–∏"):
            if drink in low:
                mem.favorite_drink = drink


# ---------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ---------------------------
async def start(update: Update, context):
    try:
        text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        logger.info("Sent /start greet to chat %s", update.effective_chat.id)
    except Exception:
        logger.exception("Failed to handle /start")


async def handle_message(update: Update, context):
    chat_id = update.effective_chat.id
    user = update.effective_user
    user_id = user.id
    user_name = user.first_name
    user_text = update.message.text or ""

    # –°—Ç–∏–∫–µ—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for key, sid in STICKERS.items():
        if key in user_text.lower():
            try:
                await context.bot.send_sticker(chat_id=chat_id, sticker=sid)
                logger.info("Sticker sent (%s) to chat %s", key, chat_id)
            except Exception:
                logger.exception("Failed sending sticker %s", key)

    # –ü–∞–º—è—Ç—å
    session = SessionLocal()
    try:
        mem = _save_history(session, user_id, user_name, user_text)
        _maybe_extract_favorite_drink(mem, user_text)
        session.commit()

        # –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ (–∏–ª–∏ fallback)
        try:
            if client is None:
                raise RuntimeError("OpenAI client not initialized")

            short_history = (mem.history or "").splitlines()[-20:]
            system_prompt = (
                "–¢—ã ‚Äî –ö–∞—Ç—è, —Å–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞. –ñ–µ–Ω—Å–∫–∏–π —Ç–æ–Ω, –ª—ë–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç (—É–º–µ—Å—Ç–Ω–æ), —é–º–æ—Ä, "
                "–¥—Ä—É–∂–µ–ª—é–±–∏–µ; –¥–∞—ë—à—å –º—è–≥–∫–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –¥–∏–∞–ª–æ–≥. "
                "–ü–æ–º–Ω–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ (–∏–º—è, –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫), "
                "–Ω–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
            )
            messages = [{"role": "system", "content": system_prompt}]
            for line in short_history:
                role = "user" if line.startswith("User:") else "assistant"
                messages.append({"role": role, "content": line.split(": ", 1)[1] if ": " in line else line})

            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
            )
            response_text = (completion.choices[0].message.content or "").strip()
        except Exception as e:
            logger.exception("OpenAI error")
            response_text = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

        _save_history(session, user_id, user_name, "", response_text)
    finally:
        session.close()

    try:
        await context.bot.send_message(chat_id=chat_id, text=response_text)
    except Exception:
        logger.exception("Failed to send message to chat %s", chat_id)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
tapp.add_handler(CommandHandler("start", start))
tapp.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ---------------------------
# FastAPI
# ---------------------------
app = FastAPI()

@app.on_event("startup")
async def _startup():
    """
    –í–ê–ñ–ù–û: –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ —á–µ—Ä–µ–∑ FastAPI –Ω—É–∂–Ω–æ —è–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PTB Application.
    """
    try:
        await tapp.initialize()
        logger.info("‚úÖ PTB Application initialized")
    except Exception:
        logger.exception("‚ùå PTB Application initialize failed")

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–π URL
    if APP_BASE_URL:
        try:
            wh_url = f"{APP_BASE_URL}/webhook/{BOT_TOKEN}"
            await tapp.bot.set_webhook(url=wh_url, allowed_updates=["message"])
            logger.info("‚úÖ Webhook set to %s", wh_url)
        except Exception:
            logger.exception("‚ùå set_webhook failed")


@app.on_event("shutdown")
async def _shutdown():
    try:
        await tapp.shutdown()
        logger.info("‚úÖ PTB Application shutdown")
    except Exception:
        logger.exception("‚ùå PTB Application shutdown failed")


@app.post("/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    if token != BOT_TOKEN:
        logger.warning("Webhook hit with wrong token")
        return JSONResponse(status_code=403, content={"ok": False, "error": "Forbidden"})

    try:
        data = await request.json()
        update = Update.de_json(data, tapp.bot)  # PTB v20: –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω bot –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        logger.info("Incoming update_id=%s", getattr(update, "update_id", "n/a"))
        try:
            await tapp.process_update(update)  # —Ç—Ä–µ–±—É–µ—Ç .initialize() (—Å–º. startup)
        except Exception as e:
            logger.exception("process_update failed")
            # –ù–µ —à–ª—ë–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç –∏–∑ –≤–µ–±—Ö—É–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å/–∑–∞—Å–ø–∞–º–∏—Ç—å), –ø—Ä–æ—Å—Ç–æ 500 ‚Üí Telegram –ø–µ—Ä–µ—à–ª—ë—Ç –ø–æ–≤—Ç–æ—Ä
            return JSONResponse(status_code=500, content={"ok": False, "error": str(e)})
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logger.exception("Webhook error: %s", e)
        return JSONResponse(status_code=500, content={"ok": False, "error": str(e)})


@app.get("/")
async def health():
    return {"status": "ok"}
