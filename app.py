import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from openai import OpenAI
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.orm import sessionmaker, declarative_base

# -----------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("app")

# -----------------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_BASE_URL = os.getenv("APP_BASE_URL")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./memory.db")

# -----------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
# -----------------------------------
client = OpenAI(api_key=OPENAI_API_KEY)
logger.info("‚úÖ OpenAI client initialized")

# -----------------------------------
# SQLAlchemy
# -----------------------------------
Base = declarative_base()
engine = create_engine(DATABASE_URL.replace("aiosqlite", "sqlite"), echo=False, future=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


class UserMemory(Base):
    __tablename__ = "user_memory"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, index=True, unique=True)
    name = Column(String(100))
    favorite_drink = Column(String(100))
    history = Column(Text)


Base.metadata.create_all(bind=engine)
logger.info("‚úÖ Database initialized")

# -----------------------------------
# Telegram bot
# -----------------------------------
tapp = Application.builder().token(BOT_TOKEN).build()

# –°—Ç–∏–∫–µ—Ä—ã
STICKERS = {
    "–≤–æ–¥–∫–∞": "CAACAgIAAxkBAAEBjr5ouGBBx_1-DTY7HwkdW3rQWOcgRAACsIAAAiFbyEn_G4lgoMu7IjYE",
    "–≤–∏—Å–∫–∏": "CAACAgIAAxkBAAEBjsBouGBSGJX2UPfsKzHTIYlfD7eAswACDH8AAnEbyEnqwlOYBHZL3jYE",
    "–≤–∏–Ω–æ": "CAACAgIAAxkBAAEBjsJouGBk6eEZ60zhrlVYxtaa6o1IpwACzoEAApg_wUm0xElTR8mU3zYE",
    "–ø–∏–≤–æ": "CAACAgIAAxkBAAEBjsRouGBy8fdkWj0MhodvqLl3eT9fcgACX4cAAvmhwElmpyDuoHw7IjYE",
    "–≥—Ä—É—Å—Ç—å": "CAACAgIAAxkBAAEBjrxouGAyqkcwuIJiCaINHEu-QVn4NAAC1IAAAhynyUnZmmKvP768xzYE",
    "–≤–µ—Å–µ–ª—å–µ": "CAACAgIAAxkBAAEBjrpouGAERwa1uHIJiB5lkhQZps-j_wACcoEAAlGlwEnCOTC-IwMCBDYE",
}


async def start(update: Update, context):
    user = update.effective_user
    name = user.first_name if user else "–¥—Ä—É–≥"
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)


async def handle_message(update: Update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    session = SessionLocal()
    memory = session.query(UserMemory).filter_by(user_id=user_id).first()
    if not memory:
        memory = UserMemory(user_id=user_id, name=user_name, favorite_drink="", history="")
        session.add(memory)
        session.commit()

    user_text = update.message.text
    memory.history = (memory.history or "") + f"\nUser: {user_text}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫
    if "–ª—é–±–∏–º—ã–π" in user_text.lower() and "–ø–∏–≤–æ" in user_text.lower():
        memory.favorite_drink = "–ø–∏–≤–æ"
    elif "–ª—é–±–∏–º—ã–π" in user_text.lower() and "–≤–∏–Ω–æ" in user_text.lower():
        memory.favorite_drink = "–≤–∏–Ω–æ"
    elif "–ª—é–±–∏–º—ã–π" in user_text.lower() and "–≤–æ–¥–∫–∞" in user_text.lower():
        memory.favorite_drink = "–≤–æ–¥–∫–∞"
    elif "–ª—é–±–∏–º—ã–π" in user_text.lower() and "–≤–∏—Å–∫–∏" in user_text.lower():
        memory.favorite_drink = "–≤–∏—Å–∫–∏"

    session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
    for key, sticker_id in STICKERS.items():
        if key in user_text.lower():
            await context.bot.send_sticker(chat_id=update.effective_chat.id, sticker=sticker_id)

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ö–∞—Ç—è, —Å–æ–±—É—Ç—ã–ª—å–Ω–∏—Ü–∞, –ª—é–±–∏—à—å –≤—ã–ø–∏—Ç—å, –ø–æ—à—É—Ç–∏—Ç—å –∏ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å. "
                        "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä."
                    ),
                },
                {"role": "user", "content": user_text},
            ],
        )
        response_text = completion.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        response_text = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

    memory.history += f"\nBot: {response_text}"
    session.commit()
    session.close()

    await context.bot.send_message(chat_id=update.effective_chat.id, text=response_text)


tapp.add_handler(CommandHandler("start", start))
tapp.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# -----------------------------------
# FastAPI
# -----------------------------------
app = FastAPI()


@app.post("/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    if token != BOT_TOKEN:
        return JSONResponse(status_code=403, content={"error": "Forbidden"})

    try:
        data = await request.json()
        update = Update.de_json(data)  # ‚úÖ —Ñ–∏–∫—Å: —É–±—Ä–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä context
        await tapp.process_update(update)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

    return JSONResponse(content={"ok": True})


@app.get("/")
async def root():
    return {"status": "ok"}
