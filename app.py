import os
import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from openai import OpenAI

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(BOT_TOKEN).build()
client = OpenAI(api_key=OPENAI_API_KEY)

# FastAPI
app = FastAPI()


# --- Handlers ---
async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫ ü§ù –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")


async def toast(update: Update, context):
    toasts = [
        "–ó–∞ –∑–¥–æ—Ä–æ–≤—å–µ! ü•Ç",
        "–ó–∞ –¥—Ä—É–∂–±—É! üçª",
        "–ó–∞ —É–¥–∞—á—É! üç∑",
        "–ß—Ç–æ–±—ã —É—Ç—Ä–æ–º –Ω–µ –±–æ–ª–µ—Ç—å! üç∫",
    ]
    import random
    await update.message.reply_text(random.choice(toasts))


async def chat(update: Update, context):
    user_message = update.message.text
    logger.info(f"User said: {user_message}")

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫. –†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π –¥—Ä—É–∂–µ—Å–∫–∏, —à—É—Ç–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ç–æ—Å—Ç—ã."},
                {"role": "user", "content": user_message},
            ],
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        reply = "–≠—Ö, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•É"

    await update.message.reply_text(reply)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("toast", toast))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))


# --- Webhook ---
@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    data = await request.json()
    logger.info(f"Incoming update: {data}")
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return {"status": "ok"}


@app.get("/")
async def root():
    return {"status": "ok"}
