import os
import re
import logging
from typing import Optional, Tuple

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse

from telegram import Update
from telegram.ext import Application, ApplicationBuilder, ContextTypes
from telegram.ext import CommandHandler, MessageHandler, filters

# === –¢–í–û–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã (OpenAI, SQLAlchemy, –º–æ–¥–µ–ª–∏, –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è ===
# from openai import OpenAI
# ... –∏ –≤—Å–µ, —á—Ç–æ —É–∂–µ –±—ã–ª–æ —É —Ç–µ–±—è –≤—ã—à–µ/–Ω–∏–∂–µ, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("app")

BOT_TOKEN = os.environ["BOT_TOKEN"]
APP_BASE_URL = os.environ["APP_BASE_URL"]  # —É–∂–µ –µ—Å—Ç—å —É —Ç–µ–±—è

app = FastAPI(title="drinking-buddy-bot")

# ---------------------------
# 1) –ú–∞–ø–ø–∏–Ω–≥ file_id —Å—Ç–∏–∫–µ—Ä–æ–≤
# ---------------------------
DRINK_STICKERS = {
    # –Ω–∞–ø–∏—Ç–∫–∏
    "beer": "CAACAgIAAxkBAAEBjsRouGBy8fdkWj0MhodvqLl3eT9fcgACX4cAAvmhwElmpyDuoHw7IjYE",
    "wine": "CAACAgIAAxkBAAEBjsJouGBk6eEZ60zhrlVYxtaa6o1IpwACzoEAApg_wUm0xElTR8mU3zYE",
    "whisky": "CAACAgIAAxkBAAEBjsBouGBSGJX2UPfsKzHTIYlfD7eAswACDH8AAnEbyEnqwlOYBHZL3jYE",
    "vodka": "CAACAgIAAxkBAAEBjr5ouGBBx_1-DTY7HwkdW3rQWOcgRAACsIAAAiFbyEn_G4lgoMu7IjYE",
    # —ç–º–æ—Ü–∏–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ)
    "happy": "CAACAgIAAxkBAAEBjrpouGAERwa1uHIJiB5lkhQZps-j_wACcoEAAlGlwEnCOTC-IwMCBDYE",
    "sad":   "CAACAgIAAxkBAAEBjrxouGAyqkcwuIJiCaINHEu-QVn4NAAC1IAAAhynyUnZmmKvP768xzYE",
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ RU/EN –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –Ω–∞–ø–∏—Ç–∫–æ–≤
DRINK_KEYWORDS = {
    "beer": [
        r"\b–ø–∏–≤–æ\b", r"\b–ø–∏–≤–∫–æ\b", r"\b–ª–∞–≥–µ—Ä\b", r"\b—ç(–π|i)–ª—å\b", r"\bstout\b", r"\bipa\b",
        r"\bbeer\b", r"\bpilsner\b", r"\b–±–∞—Ä–Ω–∞—É–ª—å—Å–∫(–æ–µ|–∏–π)\b"
    ],
    "wine": [
        r"\b–≤–∏–Ω–æ\b", r"\b–∫—Ä–∞—Å–Ω–æ–µ\b –≤–∏–Ω–æ", r"\b–±–µ–ª–æ–µ\b –≤–∏–Ω–æ", r"\b—Ä–æ–∑(–µ|—ç)\b", r"\bwine\b", r"\b—à–∞—Ä–¥–æ–Ω–µ\b", r"\–±–º–µ—Ä–ª–æ\b"
    ],
    "whisky": [
        r"\b–≤–∏—Å(–∫–∏|–∫–∏–∏)\b", r"\b—Å–∫–æ—Ç—á\b", r"\b–±—É—Ä–±–æ–Ω\b", r"\bwhisk(e?)y\b"
    ],
    "vodka": [
        r"\b–≤–æ–¥–∫[–∞–∏]\b", r"\bvodka\b", r"\b—Å—Ç–æ–ø–∫(–∞|—É|–∏)\b"
    ],
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å "champagne", "rum", "gin" –∏ —Ç.–¥.
}

# 2) –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞–ø–∏—Ç–∫–∞
def detect_drink(text: str) -> Optional[Tuple[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ('beer'|'wine'|'whisky'|'vodka', matched_word) –ª–∏–±–æ None."""
    t = text.lower()
    for drink, patterns in DRINK_KEYWORDS.items():
        for pat in patterns:
            if re.search(pat, t):
                return drink, pat
    return None

# === –ù–∏–∂–µ –æ—Å—Ç–∞–≤—å —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –ë–î, OpenAI-–∫–ª–∏–µ–Ω—Ç, prepare_prompt –∏ —Ç.–ø. ===
# client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
# SessionLocal, Base, User, Message ... –∏ —Ç.–¥.

# ---------------------------
# 3) Telegram application
# ---------------------------
tapp: Application = ApplicationBuilder().token(BOT_TOKEN).build()

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞—Ç—è. –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?")

async def toast_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•Ç")

# –ì–ª–∞–≤–Ω–æ–µ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text_in = update.message.text

    # 3.1 –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞–ø–∏—Ç–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ (–¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ –∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç)
    drink_detection = detect_drink(text_in)
    if drink_detection:
        drink_key, matched = drink_detection
        log.info(f"[drink] user={user_id} matched={matched} -> {drink_key}")
    else:
        log.info(f"[drink] user={user_id} matched=None")

    # 3.2 —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –ë–î, –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å ‚Äî –¢–í–û–ô —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –∑–¥–µ—Å—å
    # save_message(user_id, 'user', text_in)  # –ø—Ä–∏–º–µ—Ä

    # 3.3 –≥–µ–Ω–µ—Ä–∏–º –æ—Ç–≤–µ—Ç –ö–∞—Ç—ñ (–¢–í–û–ô —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤ OpenAI)
    # reply_text = await generate_reply(user_id, text_in, drink_hint=drink_detection[0] if drink_detection else None)
    # –ù–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å OpenAI/–ë–î ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç:
    reply_text = None
    try:
        # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
        # reply_text = await gen_with_openai(user_id, text_in, drink_detection[0] if drink_detection else None)
        pass
    except Exception as e:
        log.exception("OpenAI generation failed")
    if not reply_text:
        reply_text = "–î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –≤—ã–ø—å–µ–º –∑–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ! ü•Ç –ß—Ç–æ –Ω–∞–ª—å—ë–º?"

    # 3.4 —à–ª—ë–º —Ç–µ–∫—Å—Ç
    await context.bot.sendMessage(chat_id=chat_id, text=reply_text)

    # 3.5 –µ—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –Ω–∞–ø–∏—Ç–æ–∫ ‚Äî —à–ª—ë–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–∫–µ—Ä
    if drink_detection:
        drink_key, _ = drink_detection
        file_id = DRINK_STICKERS.get(drink_key)
        if file_id:
            try:
                await context.bot.sendSticker(chat_id=chat_id, sticker=file_id)
                log.info(f"[sticker] sent {drink_key} to user={user_id}")
            except Exception:
                log.exception("[sticker] failed to send")

    # 3.6 —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î ‚Äî –¢–í–û–ô —Ç–µ–∫—É—â–∏–π –∫–æ–¥
    # save_message(user_id, 'assistant', reply_text)

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
tapp.add_handler(CommandHandler("start", start_cmd))
tapp.add_handler(CommandHandler("toast", toast_cmd))
tapp.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

# ---------------------------
# 4) FastAPI endpoints
# ---------------------------
@app.get("/")
async def health():
    return PlainTextResponse("OK")

@app.post("/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    if token != BOT_TOKEN:
        raise HTTPException(status_code=403, detail="forbidden")
    update = Update.de_json(await request.json(), context=tapp.bot)
    try:
        await tapp.initialize()  # –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞
        await tapp.process_update(update)
    except Exception:
        log.exception("Webhook error")
    return JSONResponse({"ok": True})

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def on_startup():
    webhook_url = f"{APP_BASE_URL}/webhook/{BOT_TOKEN}"
    try:
        await tapp.bot.set_webhook(webhook_url)
        log.info(f"‚úÖ Webhook set to {webhook_url}")
    except Exception:
        log.exception("Failed to set webhook")
