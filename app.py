import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update, Bot
from openai import OpenAI

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
app = FastAPI()
client = OpenAI(api_key=OPENAI_API_KEY)


@app.get("/")
async def root():
    return {"status": "ok"}


@app.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    if token != BOT_TOKEN:
        return JSONResponse(status_code=403, content={"error": "Invalid token"})

    data = await request.json()
    update = Update.de_json(data, bot)

    if update.message and update.message.text:
        user_message = update.message.text

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –≤–µ—Å—ë–ª—ã–π —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —é–º–æ—Ä–æ–º –∏ –∏–Ω–æ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–π —Ç–æ—Å—Ç—ã."},
                    {"role": "user", "content": user_message},
                ],
                max_tokens=150
            )

            reply = response.choices[0].message.content.strip()
        except Exception as e:
            logging.error(f"OpenAI error: {e}")
            reply = "–ù—É, –∑–∞ —ç—Ç–æ –Ω–∞–¥–æ –≤—ã–ø–∏—Ç—å! üçª"

        await bot.send_message(chat_id=update.message.chat_id, text=reply)

    return JSONResponse(status_code=200, content={"ok": True})
