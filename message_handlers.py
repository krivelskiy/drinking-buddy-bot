"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import logging
import asyncio
import re
from telegram import Update
from telegram.ext import ContextTypes
from typing import Optional

from database import (
    save_message, 
    reset_quick_message_flag, 
    get_user_name, 
    get_user_age,
    update_user_age,
    update_user_preferences
)
from llm_utils import llm_reply
from gender_llm import generate_gender_appropriate_gratitude
from db_utils import update_user_name_and_gender, get_user_gender
from stats_utils import generate_drinks_stats, save_drink_record, should_remind_about_stats, update_stats_reminder
from katya_utils import can_katya_drink_free, send_sticker_by_command, increment_katya_drinks, send_gift_request

logger = logging.getLogger(__name__)

def parse_age_from_text(text: str) -> Optional[int]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ò—â–µ–º —á–∏—Å–ª–∞ –æ—Ç 10 –¥–æ 100
    age_pattern = r'\b(1[0-9]|[2-9][0-9]|100)\b'
    matches = re.findall(age_pattern, text)
    
    if matches:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        age = int(matches[0])
        if 10 <= age <= 100:
            return age
    
    return None

def parse_drink_preferences(text: str) -> Optional[str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    drink_keywords = ['–ø–∏–≤–æ', '–≤–æ–¥–∫–∞', '–≤–∏–Ω–æ', '–≤–∏—Å–∫–∏', '–∫–æ–Ω—å—è–∫', '—à–∞–º–ø–∞–Ω—Å–∫–æ–µ', '—Ä–æ–º', '–¥–∂–∏–Ω', '—Ç–µ–∫–∏–ª–∞']
    
    found_preferences = []
    text_lower = text.lower()
    
    for drink in drink_keywords:
        if drink in text_lower:
            found_preferences.append(drink)
    
    if found_preferences:
        return ', '.join(found_preferences)
    
    return None

def parse_drink_info(text: str) -> Optional[dict]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–∏—Ç–æ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–∏—Ç–æ–º
    patterns = [
        r'–≤—ã–ø–∏–ª\s+(\d+)\s*(?:–≥|–≥—Ä–∞–º–º|–º–ª|–ª–∏—Ç—Ä|–ª|—Å—Ç–∞–∫–∞–Ω|—Å—Ç–∞–∫–∞–Ω–∞|—Å—Ç–∞–∫–∞–Ω–æ–≤|–±–∞–Ω–∫–∞|–±–∞–Ω–∫–∏|–±–∞–Ω–æ–∫|–±—É—Ç—ã–ª–∫–∞|–±—É—Ç—ã–ª–∫–∏|–±—É—Ç—ã–ª–æ–∫|—Ä—é–º–∫–∞|—Ä—é–º–∫–∏|—Ä—é–º–æ–∫)',
        r'–≤—ã–ø–∏–ª–∞\s+(\d+)\s*(?:–≥|–≥—Ä–∞–º–º|–º–ª|–ª–∏—Ç—Ä|–ª|—Å—Ç–∞–∫–∞–Ω|—Å—Ç–∞–∫–∞–Ω–∞|—Å—Ç–∞–∫–∞–Ω–æ–≤|–±–∞–Ω–∫–∞|–±–∞–Ω–∫–∏|–±–∞–Ω–æ–∫|–±—É—Ç—ã–ª–∫–∞|–±—É—Ç—ã–ª–∫–∏|–±—É—Ç—ã–ª–æ–∫|—Ä—é–º–∫–∞|—Ä—é–º–∫–∏|—Ä—é–º–æ–∫)',
        r'(\d+)\s*(?:–≥|–≥—Ä–∞–º–º|–º–ª|–ª–∏—Ç—Ä|–ª|—Å—Ç–∞–∫–∞–Ω|—Å—Ç–∞–∫–∞–Ω–∞|—Å—Ç–∞–∫–∞–Ω–æ–≤|–±–∞–Ω–∫–∞|–±–∞–Ω–∫–∏|–±–∞–Ω–æ–∫|–±—É—Ç—ã–ª–∫–∞|–±—É—Ç—ã–ª–∫–∏|–±—É—Ç—ã–ª–æ–∫|—Ä—é–º–∫–∞|—Ä—é–º–∫–∏|—Ä—é–º–æ–∫)',
    ]
    
    text_lower = text.lower()
    
    for pattern in patterns:
        match = re.search(pattern, text_lower)
        if match:
            amount = int(match.group(1))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–∏—Ç–∫–∞
            drink_type = "–∞–ª–∫–æ–≥–æ–ª—å"
            if any(word in text_lower for word in ['–ø–∏–≤–æ', 'beer']):
                drink_type = "–ø–∏–≤–æ"
            elif any(word in text_lower for word in ['–≤–æ–¥–∫–∞', 'vodka']):
                drink_type = "–≤–æ–¥–∫–∞"
            elif any(word in text_lower for word in ['–≤–∏–Ω–æ', 'wine']):
                drink_type = "–≤–∏–Ω–æ"
            elif any(word in text_lower for word in ['–≤–∏—Å–∫–∏', 'whisky']):
                drink_type = "–≤–∏—Å–∫–∏"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            unit = "–ø–æ—Ä—Ü–∏–π"
            if any(word in text_lower for word in ['–≥', '–≥—Ä–∞–º–º']):
                unit = "–≥"
            elif any(word in text_lower for word in ['–º–ª']):
                unit = "–º–ª"
            elif any(word in text_lower for word in ['–ª–∏—Ç—Ä', '–ª']):
                unit = "–ª"
            elif any(word in text_lower for word in ['—Å—Ç–∞–∫–∞–Ω', '—Å—Ç–∞–∫–∞–Ω–∞', '—Å—Ç–∞–∫–∞–Ω–æ–≤']):
                unit = "—Å—Ç–∞–∫–∞–Ω–æ–≤"
            elif any(word in text_lower for word in ['–±–∞–Ω–∫–∞', '–±–∞–Ω–∫–∏', '–±–∞–Ω–æ–∫']):
                unit = "–±–∞–Ω–æ–∫"
            elif any(word in text_lower for word in ['–±—É—Ç—ã–ª–∫–∞', '–±—É—Ç—ã–ª–∫–∏', '–±—É—Ç—ã–ª–æ–∫']):
                unit = "–±—É—Ç—ã–ª–æ–∫"
            elif any(word in text_lower for word in ['—Ä—é–º–∫–∞', '—Ä—é–º–∫–∏', '—Ä—é–º–æ–∫']):
                unit = "—Ä—é–º–æ–∫"
            
            return {
                "drink_type": drink_type,
                "amount": amount,
                "unit": unit
            }
    
    return None

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not update.message or not update.message.text:
        return
    
    text_in = update.message.text
    user_tg_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    logger.info(f"Received message: {text_in} from user {user_tg_id}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_message(chat_id, user_tg_id, "user", text_in)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if update.message.from_user.first_name:
            current_name = get_user_name(user_tg_id)
            current_gender = get_user_gender(user_tg_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –µ—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ò–õ–ò –ø–æ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            if current_name != update.message.from_user.first_name or not current_gender:
                update_user_name_and_gender(user_tg_id, update.message.from_user.first_name)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reset_quick_message_flag(user_tg_id)
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–ï–†–í–û–ô!
        if any(word in text_in.lower() for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å–∫–æ–ª—å–∫–æ –≤—ã–ø–∏–ª', '—Å–∫–æ–ª—å–∫–æ –ø–∏–ª', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫']):
            stats = generate_drinks_stats(user_tg_id)
            await update.message.reply_text(f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ:**\n\n{stats}")
            save_message(chat_id, user_tg_id, "assistant", f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∏—Ç–æ–≥–æ:**\n\n{stats}", None, None, None)
            return  # –í–ê–ñ–ù–û: return —á—Ç–æ–±—ã –ù–ï –≤—ã–∑—ã–≤–∞—Ç—å LLM
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...
        # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
        age = parse_age_from_text(text_in)
        if age:
            try:
                update_user_age(user_tg_id, age)
                logger.info("Updated user age to %d", age)
            except Exception:
                logger.exception("Failed to update age")
        
        # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö
        preferences = parse_drink_preferences(text_in)
        if preferences:
            try:
                update_user_preferences(user_tg_id, preferences)
                logger.info("Updated user preferences to %s", preferences)
            except Exception:
                logger.exception("Failed to update preferences")
        
        # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–∏—Ç–æ–≥–æ
        drink_info = parse_drink_info(text_in)
        if drink_info:
            try:
                save_drink_record(user_tg_id, chat_id, drink_info)
                logger.info("‚úÖ Saved drink record: %s", drink_info)
            except Exception:
                logger.exception("Failed to save drink record")
        
        # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        if should_remind_about_stats(user_tg_id):
            reminder_msg = "üí° –ö—Å—Ç–∞—Ç–∏, —è –º–æ–≥—É –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–µ–≥–æ –≤—ã–ø–∏—Ç–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –∏ —è –ø–æ–∫–∞–∂—É —Å–∫–æ–ª—å–∫–æ —Ç—ã –≤—ã–ø–∏–ª —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞ –Ω–µ–¥–µ–ª—é! üìä\n\n–ê —á—Ç–æ–±—ã —è –Ω–µ –∑–∞–±—ã–≤–∞–ª–∞ - –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –ø—å–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: \"–≤—ã–ø–∏–ª 2 –ø–∏–≤–∞\" –∏–ª–∏ \"–≤—ã–ø–∏–ª 100–≥ –≤–æ–¥–∫–∏\" üç∑"
            await update.message.reply_text(reminder_msg)
            save_message(chat_id, user_tg_id, "assistant", reminder_msg, None, None, None)
            update_stats_reminder(user_tg_id)
            return
        
        # 5) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
        from database import get_recent_messages
        recent_messages = get_recent_messages(chat_id, limit=12)
        answer = llm_reply(text_in, user_tg_id, chat_id, recent_messages)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ LLM
        sticker_command = None
        if any(keyword in answer.lower() for keyword in ["–≤—ã–ø—å–µ–º", "–≤—ã–ø—å–µ–º—Ç–µ", "–ø—å–µ–º", "–ø—å–µ–º—Ç–µ", "–≤—ã–ø—å–µ–º –≤–º–µ—Å—Ç–µ", "–¥–∞–≤–∞–π –≤—ã–ø—å–µ–º", "–ø–µ–π", "–≤—ã–ø–µ–π", "–Ω–∞–ª–∏–≤–∞–π"]):
            sticker_command = "[SEND_DRINK_BEER]"
        elif any(keyword in answer.lower() for keyword in ["–≤–æ–¥–∫–∞", "–≤–æ–¥–æ—á–∫–∞", "–≤–æ–¥–æ—á–∫–∏"]):
            sticker_command = "[SEND_DRINK_VODKA]"
        elif any(keyword in answer.lower() for keyword in ["–≤–∏–Ω–æ", "–≤–∏–Ω—Ü–æ", "–≤–∏–Ω—Ü–∞"]):
            sticker_command = "[SEND_DRINK_WINE]"
        elif any(keyword in answer.lower() for keyword in ["–≤–∏—Å–∫–∏", "–≤–∏—Å–∫–∞—Ä—å", "–≤–∏—Å–∫–∞—Ä—è"]):
            sticker_command = "[SEND_DRINK_WHISKEY]"
        elif any(keyword in answer.lower() for keyword in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "—Ç–æ—Å–∫–ª–∏–≤–æ", "–≥—Ä—É—Å—Ç–Ω–∞—è"]):
            sticker_command = "[SEND_SAD_STICKER]"
        elif any(keyword in answer.lower() for keyword in ["—Ä–∞–¥–æ—Å—Ç–Ω–æ", "–≤–µ—Å–µ–ª–æ", "—Å—á–∞—Å—Ç–ª–∏–≤–æ", "—Ä–∞–¥–æ—Å—Ç–Ω–∞—è"]):
            sticker_command = "[SEND_HAPPY_STICKER]"

        # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            sent_message = await update.message.reply_text(answer)
            
            # 7) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä (–µ—Å–ª–∏ LLM –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª)
            if sticker_command:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ö–∞—Ç—è –ø–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                if can_katya_drink_free(chat_id):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    await send_sticker_by_command(context.bot, chat_id, sticker_command)
                    increment_katya_drinks(chat_id)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –° –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä–µ
                    save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id, None, sticker_command)
                else:
                    # –ö–∞—Ç—è –∏—Å—á–µ—Ä–ø–∞–ª–∞ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                    await send_gift_request(context.bot, chat_id, user_tg_id)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –ë–ï–ó —Å—Ç–∏–∫–µ—Ä–∞
                    save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –±–µ–∑ —Å—Ç–∏–∫–µ—Ä–∞
                save_message(chat_id, user_tg_id, "assistant", answer, sent_message.message_id)
        except Exception as e:
            logger.exception(f"Message handler error: {e}")
    except Exception as e:
        logger.error(f"Error in handle_user_message: {e}")
        # –ö–∞—Ç—è –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—á–∞—Ç—å, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        fallback_message = "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ù–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –≥–æ—Ç–æ–≤–∞ –≤—ã–ø–∏—Ç—å —Å —Ç–æ–±–æ–π! üçª"
        await update.message.reply_text(fallback_message)
        save_message(chat_id, user_tg_id, "assistant", fallback_message, None, None, None)

async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    try:
        # –î–ª—è SUCCESSFUL_PAYMENT —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ update.message.successful_payment
        if not update.message or not update.message.successful_payment:
            logger.error("No successful payment data found in update")
            return
            
        payment = update.message.successful_payment
        user_tg_id = update.message.from_user.id
        chat_id = update.message.chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–∏—Ç–∫–µ –∏–∑ payload —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        drink_name = '–Ω–∞–ø–∏—Ç–æ–∫'
        drink_emoji = ''
        
        try:
            import json
            if payment.invoice_payload:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ payload JSON –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                if payment.invoice_payload.startswith('{'):
                    payload_data = json.loads(payment.invoice_payload)
                    drink_name = payload_data.get('drink_name', '–Ω–∞–ø–∏—Ç–æ–∫')
                    drink_emoji = payload_data.get('drink_emoji', '')
                else:
                    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ "gift_–≤–∏—Å–∫–∏"
                    drink_name = "–Ω–∞–ø–∏—Ç–æ–∫"
                    drink_emoji = ""
                logger.info(f"Parsed payload: {payment.invoice_payload}")
            else:
                logger.warning("Empty invoice_payload")
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse invoice_payload: {payment.invoice_payload}, error: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞
        user_name = get_user_name(user_tg_id) or "–¥—Ä—É–≥"
        user_gender = get_user_gender(user_tg_id) or "neutral"
        
        gratitude_messages = generate_gender_appropriate_gratitude(user_name, user_gender, drink_name, drink_emoji)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, message in enumerate(gratitude_messages):
            await asyncio.sleep(1.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await context.bot.send_message(chat_id=chat_id, text=message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —Å –≤—ã–ø–∏–≤–∞–Ω–∏–µ–º –ø–æ–¥–∞—Ä–∫–∞
        from katya_utils import send_sticker_by_command, update_katya_free_drinks
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ payload
        sticker_command = "[SEND_DRINK_BEER]"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "gift_–≤–∏–Ω–æ" in payment.invoice_payload:
            sticker_command = "[SEND_DRINK_WINE]"
        elif "gift_–≤–æ–¥–∫–∞" in payment.invoice_payload:
            sticker_command = "[SEND_DRINK_VODKA]"
        elif "gift_–≤–∏—Å–∫–∏" in payment.invoice_payload:
            sticker_command = "[SEND_DRINK_WHISKY]"
        elif "gift_–ø–∏–≤–æ" in payment.invoice_payload:
            sticker_command = "[SEND_DRINK_BEER]"
        
        await send_sticker_by_command(context.bot, chat_id, sticker_command)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
        await update_katya_free_drinks(chat_id, 1)
        
        logger.info(f"Successful payment processed for user {user_tg_id}, drink: {drink_name}")
        
    except Exception as e:
        logger.error(f"Error processing successful payment: {e}") 